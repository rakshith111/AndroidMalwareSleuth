import argparse
import os
import sys

current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

from FeatureExtraction.IntentExtractor.Intent_permisson_extractor import *
from FeatureExtraction.ApiExtractor.static_analyzer import *
from FeatureExtraction.libs.color import bcolors
from FeatureExtraction.libs._base_logger import logger, error_logger
from FeatureExtraction.libs.get_count import convert_json_to_standardized_output

def intent_extractor(args):
    """
    Extracts intents from the given APK file and writes them to a CSV file.

    Args:
        args: The arguments passed to the script.
    """
    logger.info(
        f"{bcolors.OKGREEN}Starting Extracting intents and perms{bcolors.ENDC}")
    # Create a temp folder to store the JSON files
    temp_dir = "temp-intent-permission"
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)

    # Run intentExtractor.exe
    run_intent_extractor(args.apk_folder, temp_dir)

    # Process each JSON file in the input folder
    for json_file in os.listdir(temp_dir):
        if json_file.endswith(".json"):
            json_file_path = os.path.join(temp_dir, json_file)
            process_intents_and_permissions(input_file_path=json_file_path,
                                            intents_csv_file_path=args.intents_csv,
                                            permissions_csv_file_path=args.permissions_csv,
                                            output_folder_path=args.output_folder)

    # Remove the temp folder
    shutil.rmtree(temp_dir)
    logger.info(
        f"{bcolors.OKGREEN}Finished Extracting intents and perms{bcolors.ENDC}")


def static_feature_extractor(args):
    """
    Extracts static features from the given APK file and writes them to a CSV file.

    Args:
        args: The arguments passed to the script.
    """
    logger.info(
        f"{bcolors.OKGREEN}Starting Extracting static features{bcolors.ENDC}")

    # Run static analyzer
    download_latest_jadx(args.update)
    EXEC_PATH = set_exec_path()
    if args.output_folder is None:
        OUTPUT_DIR = os.path.join(os.getcwd(), 'FeatureExtraction', 'Output')
    else:
        OUTPUT_DIR = args.output_folder
    apk_list = process_input_folder(args.apk_folder)
    java_output_folders = apk_to_java(apk_list, output_dir=OUTPUT_DIR,
                                      exec_path=EXEC_PATH, additional_args=args.additional)
    extract_features(java_output_folders, OUTPUT_DIR)
    convert_json_to_standardized_output(
        OUTPUT_DIR, OUTPUT_DIR, args.api_header_file)
    cleanfolder(java_output_folders)
    logger.info(
        f"{bcolors.OKGREEN}Finished Extracting static features{bcolors.ENDC}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Extracts intents, permissions and static features from the given APK file and writes them to a Json file.")
    parser.add_argument("-af", "--apk_folder",
                        help="Path to the APK folder", type=str, required=True)
    parser.add_argument("-o", "--output_folder",
                        help="Path to the output folder", type=str, required=True)
    parser.add_argument("-ic", "--intents_csv",
                        help="Path to the standard intents CSV file (optional)", type=str, required=False)
    parser.add_argument("-pc", "--permissions_csv",
                        help="Path to the standard permissions CSV file (optional)", type=str, required=False)
    parser.add_argument("-u", "--update",   help="Update jadx to latest version",
                        type=bool, default=True, required=False)
    parser.add_argument("-ax", "--additional",
                        help="Additional arguments to be passed to jadx", type=str, default=None, required=False)
    parser.add_argument('-ah', '--api_header_file', type=str,
                        default=None, help='path of the API header CSV file', required=False)
    args = parser.parse_args()
    intent_extractor(args)
    static_feature_extractor(args)

'''
Try this command:
-af D:\tcwork\apks\AndroRat\test  -ic ChimeraDataset\Headers\ChimeraDatasetIntent_headers.csv  -pc ChimeraDataset\Headers\ChimeraDatasetPermission_headers.csv  -o SampleOutput
'''
