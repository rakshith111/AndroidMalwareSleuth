import json
import os
import csv
import argparse


def convert_json_to_standardized_output(input_folder: str, output_folder: str, api_header_file: str = None) -> None:
    """
    Converts all the JSON files in the input folder into a standardized output with count.
    If an API header CSV file is provided, it filters the JSON data based on the API headers, and if not,
    it skips the filtering part and directly applies the count.

    Parameters:
        input_folder (str): Path of the input folder containing the JSON files.
        output_folder (str): Path of the output folder where the standardized output files will be stored.
        api_header_file (str, optional): Path of the CSV file containing the API headers. Defaults to None.

    Returns:
        None
    """

    # Create the output folder if it does not exist
    output_folder = os.path.join(output_folder, 'APIs')
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Iterate through all the JSON files in the input folder
    for filename in os.listdir(input_folder):
        if filename.endswith('.json'):
            input_file = os.path.join(input_folder, filename)
            with open(input_file, 'r') as f:
                data = json.load(f)

            # Filter the JSON data based on the API headers, if provided
            if api_header_file is not None:
                with open(api_header_file, 'r') as f:
                    reader = csv.reader(f)
                    api_header = {row[0] for row in reader}

                filtered_data = {}
                for key, value in data.items():
                    if key in api_header:
                        filtered_data[key] = value
            else:
                filtered_data = data

            # Calculate the count of API calls in each file
            for api_name, api_info in filtered_data.items():
                files = api_info.get("files", {})
                api_count = 0
                for file_path, line_numbers in files.items():
                    lines = line_numbers.split(',')
                    count = len(lines)
                    api_count += count
                    files[file_path] = str(count)
                filtered_data[api_name] = {'count': api_count}

            # Write the output file
            output_file = os.path.join(output_folder, filename)
            with open(output_file, 'w') as f:
                json.dump(filtered_data, f, indent=4)

            # Delete the input file
            os.remove(input_file)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Convert JSON files in input folder to standardized output')
    parser.add_argument('-i', '--input_folder', type=str,
                        help='path of the input folder', required=True
                        )
    parser.add_argument('-o', '--output_folder', type=str,
                        help='path of the output folder', required=True)
    parser.add_argument('-ah', '--api_header_file', type=str,
                        default=None, help='path of the API header CSV file', required=False)
    args = parser.parse_args()

    convert_json_to_standardized_output(
        args.input_folder, args.output_folder, args.api_header_file)
