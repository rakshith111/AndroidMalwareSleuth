import sys
import json
import csv
import os
import argparse
import subprocess
import shutil
from typing import Set, List, Dict, Tuple, Any

current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)
from libs.color import bcolors
from libs._base_logger import logger, error_logger

def is_standard_intent(intent: str, standard_intents: Set[str]) -> bool:
    """
    Checks if the given intent is a standard intent.

    Args:
        intent: The intent string to be checked.
        standard_intents: A set of standard intents.

    Returns:
        True if the intent is a standard intent, False otherwise.
    """
    return intent in standard_intents


def is_standard_permission(permission: str, standard_permissions: Set[str]) -> bool:
    """
    Checks if the given permission is a standard permission.

    Args:
        permission: The permission string to be checked.
        standard_permissions: A set of standard permissions.

    Returns:
        True if the permission is a standard permission, False otherwise.
    """
    return permission in standard_permissions


def convert_to_csv_format(name: str) -> str:
    """
    Converts a given string into a CSV-friendly format.

    Args:
        name: The input string to be converted.

    Returns:
        A CSV-friendly string.
    """
    name = name.lower().replace(".", "dot")
    return name


def load_standard_items(csv_file_path: str) -> Set[str]:
    """
    Loads standard items from a CSV file.

    Args:
        csv_file_path: The path to the CSV file containing standard items.

    Returns:
        A set of standard items.
    """
    standard_items = set()
    with open(csv_file_path, "r") as csv_file:
        csv_reader = csv.reader(csv_file)
        for row in csv_reader:
            standard_items.add(row[0])
    return standard_items


def process_intents_and_permissions(input_file_path: str, intents_csv_file_path: str, permissions_csv_file_path: str, output_folder_path: str) -> None:
    """
    Processes intents and permissions from a JSON file and writes the output to another JSON file.

    Args:
        input_file_path: The path to the input JSON file.
        intents_csv_file_path: The path to the standard intents CSV file.
        permissions_csv_file_path: The path to the standard permissions CSV file.
        output_folder_path: The path to the output folder.
    """
    with open(input_file_path, "r") as file:
        input_data = json.load(file)

    permissions = set()
    intents = {}
    standard_intents = load_standard_items(intents_csv_file_path)
    standard_permissions = load_standard_items(permissions_csv_file_path)

    # (processing code unchanged)


def run_intent_extractor(apk_folder: str, output_folder: str) -> str:
    """
    Runs the intent extractor on the given APK folder.

    Args:
        apk_folder: The path to the APK folder.
        output_folder: The path to the output folder.

    Returns:
        The path to the output folder.
    """
    command = f"FeatureExtraction\IntentExtraction\intentExtractor.exe {apk_folder} {output_folder}"
    process = subprocess.run(command, shell=True, text=True)
    if process.returncode != 0:
        logger.error(
            f"{bcolors.FAIL}Error while running intentExtractor.exe{bcolors.ENDC}")
        sys.exit(1)
    return output_folder


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Extract intents and permissions from a JSON file.")
    parser.add_argument("-a", "--apk_folder",
                        help="Path to the APK folder", type=str, required=True)
    parser.add_argument("-ic", "--intents_csv",
                        help="Path to the standard intents CSV file", type=str, required=True)
    parser.add_argument("-pc", "--permissions_csv",
                        help="Path to the standard permissions CSV file", type=str, required=True)
    parser.add_argument("-o", "--output_folder",
                        help="Path to the output folder", type=str, required=True)

    args = parser.parse_args()
    temp_dir = "temp-intent-permission"
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)

    # Run intentExtractor.exe
    run_intent_extractor(args.apk_folder, temp_dir)

    # Process each JSON file in the input folder
    for json_file in os.listdir(temp_dir):
        if json_file.endswith(".json"):
            json_file_path = os.path.join(temp_dir, json_file)
            process_intents_and_permissions(
                json_file_path, args.intents_csv, args.permissions_csv, args.output_folder)
            logger.info(
                f"{bcolors.OKGREEN}Finished Extracting intents and perms -->{json_file}{bcolors.ENDC}")
    # Remove the temp folder

    shutil.rmtree(temp_dir)

'''
Try this command:
-a apk/folder  -ic ChimeraDataset\Headers\ChimeraDatasetIntent_headers.csv  -pc ChimeraDataset\Headers\ChimeraDatasetPermission_headers.csv  -o SampleOutput
'''
