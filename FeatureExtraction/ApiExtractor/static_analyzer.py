import os
import subprocess
import argparse
from typing import List, Optional
import platform


from _base_logger import logger
from _base_logger import error_logger
from jadx_updator import download_latest_jadx


def process_input_folder(app_dir: str) -> List[str]:
    '''
    Finds all the APKs in a directory and genrates full path to each APK
    '''
    if not os.path.exists(app_dir):
        logger.error("[-] The folder does not exist.")
        return
    if not os.path.isdir(app_dir):
        logger.error("[-] The provided path is not a folder.")
        return

    logger.info('[+] Looking for APKs in: {}'.format(app_dir))
    apk_list = []
    for root, dirs, files in os.walk(app_dir):
        for file in files:
            if file.endswith('.apk'):
                apk_list.append(os.path.join(root, file))
                logger.info('[+] Found APK: {}'.format(file))
    logger.info('[+] Total APKs found: {}'.format(len(apk_list)))
    return apk_list


def apk_to_java(folder: List[str], output_dir: str, exec_path: Optional[str] = None, additional_args: Optional[str] = None):
    '''
    Converts APK to Java using Jadx
    '''
    if not os.path.exists(exec_path):
        logger.error("[-] Jadx executable not found.")
        return
    if not os.path.exists(output_dir):
        logger.error("[-] Output directory does not exist.")
        logger.info('[+] Creating output directory: {}'.format(output_dir))
        os.makedirs(output_dir)

    filenames = []

    for apk in folder:

        filename = os.path.basename(apk)
        filename = os.path.splitext(filename)[0]
        filenames.append(filename)
        # Clean up filename
        filename = filename.replace(' ', '_')
        # Create temp folder for each APK
        current_apk_output_dir = os.path.join(output_dir, filename)
        if not os.path.exists(current_apk_output_dir):
            os.makedirs(current_apk_output_dir)

        logger.info('[+] Converting APK to Java: {}'.format(filename))

        # args=[ exec_path, '--deobf', '--deobf-min', '3', '--deobf-max', '64', '--deobf-use-sourcename', '--deobf-parse-kotlin-metadata', '--deobf-res-name-source', 'auto', '--use-kotlin-methods-for-var-names', 'apply', '--rename-flags', 'all', '-d', os.path.join(output_dir, filename), apk]

        if additional_args is None:
            command = [exec_path, '-ds', current_apk_output_dir,
                       '-r',
                       '--show-bad-code',
                       "--deobf",
                       apk]
        else:
            command = [exec_path, '-ds', current_apk_output_dir,
                       '-r',
                       '--show-bad-code',
                       "--deobf",
                       apk, additional_args]

        with subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as proc:
            for line in proc.stdout:
                logger.info(line.decode().strip())
            for line in proc.stderr:
                error_logger.error(line.decode().strip())


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Process a folder.")
    parser.add_argument(
        "--folder", "--f",  help="Input Path to folder of APKs to be processed", type=str, required=True)
    parser.add_argument(
        "--output", "--o",  help="Output Path to folder of APKs to be processed", type=str, required=False)
    parser.add_argument("--update", "--u",  help="Update jadx to latest version",
                        type=bool, default=True, required=False)
    parser.add_argument("--additional", "--a",
                        help="Additional arguments to be passed to jadx", type=str, default=None, required=False)
    args = parser.parse_args()
    download_latest_jadx(False)
    if platform.system() == 'Windows':
        EXEC_PATH = os.path.join(
            os.getcwd(), 'FeatureExtraction', 'libs', 'jadx', 'bin', 'jadx.bat')
    elif platform.system() == 'Linux':
        EXEC_PATH = os.path.join(
            os.getcwd(), 'FeatureExtraction', 'libs', 'jadx', 'bin', 'jadx')
    if args.output is None:
        OUTPUT_DIR = os.path.join(os.getcwd(), 'FeatureExtraction', 'Output')
    else:
        OUTPUT_DIR = args.output

    api_rules = os.path.join(os.getcwd(), 'FeatureExtraction', 'libs', 'Mobfs_api_ref', 'android_apis.yaml')
    print(api_rules)

    apk_list = process_input_folder(args.folder)    
    apk_to_java(apk_list, output_dir=OUTPUT_DIR,
                exec_path=EXEC_PATH, additional_args=args.additional)
