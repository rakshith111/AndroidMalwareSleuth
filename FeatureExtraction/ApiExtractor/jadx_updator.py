import os
import zipfile
import requests
from tqdm import tqdm
from _base_logger import logger


def download_latest_jadx(check=True):
    if check:
        root_dir = "FeatureExtraction\libs"
        if not os.path.exists(root_dir):
            os.makedirs(root_dir)
        jadx_dir = os.path.join(root_dir, "jadx")
        version_file = os.path.join(root_dir, "latest_version.txt")

        url = "https://api.github.com/repos/skylot/jadx/releases/latest"
        response = requests.get(url)

        if response.status_code != 200:
            logger.error(
                "[-] Error fetching latest release info: {}".format(response.status_code))
            return

        release_info = response.json()
        tag_name = release_info["tag_name"]

        if not os.path.exists(root_dir):
            os.makedirs(root_dir)

        if os.path.exists(version_file):
            with open(version_file, "r") as f:
                current_version = f.read().strip()
        else:
            current_version = ""

        if tag_name != current_version:
            logger.info(
                "[+] Downloading and extracting jadx-{}...".format(tag_name))

            if not os.path.exists(jadx_dir):
                os.makedirs(jadx_dir)

            download_url = None
            for asset in release_info["assets"]:
                if asset["name"].endswith(".zip"):
                    download_url = asset["browser_download_url"]
                    break

            if not download_url:
                logger.error("[-] Error: Download URL not found.")
                return

            response = requests.get(download_url, stream=True)

            if response.status_code != 200:
                logger.error(
                    "[-] Error downloading jadx-{}.zip: {}".format(tag_name, response.status_code))
                return

            zip_path = os.path.join(jadx_dir, "{}.zip".format(tag_name))
            total_size = int(response.headers.get("content-length", 0))
            with open(zip_path, "wb") as f:
                for data in tqdm(response.iter_content(chunk_size=1024), total=total_size//1024, unit="KB"):
                    f.write(data)

            with zipfile.ZipFile(zip_path, "r") as zip_ref:
                zip_ref.extractall(jadx_dir)

            # Remove downloaded zip file
            os.remove(zip_path)

            # Update the latest_version.txt file
            with open(version_file, "w") as f:
                f.write(tag_name)

            logger.info(
                "[+] jadx-{} successfully downloaded and extracted.".format(tag_name))
        else:
            logger.info("[+] jadx-{} is already up to date.".format(tag_name))
    else:
        logger.info("[x] Auto update is disabled.")

if __name__ == "__main__":
    download_latest_jadx(True)
