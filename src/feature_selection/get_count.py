import os
import csv
import sys
import json
import argparse


sys.path.append(
    os.path.dirname((os.path.dirname(os.path.abspath(__file__)))))
from libs._base_logger import logger
from libs._base_logger import error_logger
from libs.color import bcolors

def clean_count(input_folder: str, output_folder: str) -> None:
    '''
    Counts and cleans the JSON files in the input folder.

    Args:
        input_folder (str): Path of the input folder containing the JSON files.
        output_folder (str): Path of the output folder where the cleaned output files will be stored.
    '''
    logger.info(f"{bcolors.HEADER}{bcolors.UNDERLINE}[+] Running clean_count {bcolors.ENDC}")

    # Create the output folder if it does not exist
    output_folder = os.path.join(output_folder, 'APIs')
    if not os.path.exists(output_folder):
        logger.warning(f"{bcolors.WARNING}[*] Output folder does not exist. Creating one...{bcolors.ENDC}")
        os.makedirs(output_folder)

    # Iterate through all the JSON files in the input folder
    for filename in os.listdir(input_folder):
        if filename.endswith('.json'):
            input_file = os.path.join(input_folder, filename)
            with open(input_file, 'r') as f:
                data = json.load(f)

            # Calculate the count of API calls in each file
            for api_name, api_info in data.items():
                files = api_info.get("files", {})
                api_count = 0
                for file_path, line_numbers in files.items():
                    lines = line_numbers.split(',')
                    count = len(lines)
                    api_count += count
                    files[file_path] = str(count)
                data[api_name] = api_count

            # Write the output file
            output_file = os.path.join(output_folder, filename)
            output_file = os.path.normpath(output_file)
            with open(output_file, 'w') as f:
                json.dump(data, f, indent=4)
    logger.info(f"{bcolors.FAIL}{bcolors.UNDERLINE}[+] Cleaned JSON files written to: {output_folder}{bcolors.ENDC}")
    # Delete files in input folder
    for filename in os.listdir(input_folder):
        if filename.endswith('.json'):
            os.remove(os.path.join(input_folder, filename))


def json_standardizer(cleaned_data: str,  api_header_file: str = None) -> None:
    '''
    Filters the cleaned JSON data based on the API headers and writes the filtered output to files.

    Args:
        cleaned_data (str): Path of the folder containing the cleaned JSON files.
        api_header_file (str): Path of the CSV file containing the API headers. Defaults to None.
    '''
    # Set cleaned data folder as the output folder
    cleaned_data = os.path.normpath(os.path.join(cleaned_data, 'APIs'))
    output_folder = cleaned_data
    logger.info(f"{bcolors.HEADER}{bcolors.UNDERLINE}[+] Running Json standardizer {bcolors.ENDC}")
    # Load the API headers from the CSV file
    api_headers = []
    if api_header_file is not None:
        with open(api_header_file, 'r') as f:
            reader = csv.reader(f)
            for row in reader:
                api_headers.append(row[0])
    logger.info(f"{bcolors.OKGREEN}{bcolors.UNDERLINE}[+] API headers loaded from: {api_header_file}{bcolors.ENDC}")
    # Iterate through all the JSON files in the input folder
    for filename in os.listdir(cleaned_data):
        if filename.endswith('.json'):
            input_file = os.path.join(cleaned_data, filename)
            with open(input_file, 'r') as f:
                data = json.load(f)
            # Filter the JSON data based on the API headers
            if api_header_file is not None:
                data = {k: v for k, v in data.items() if k in api_headers}
            # Write the output file
            output_file = os.path.normpath(
                os.path.join(output_folder, filename))
            logger.info(f"{bcolors.OKGREEN}[+] Processed file: {filename}{bcolors.ENDC}")
            with open(output_file, 'w') as f:
                json.dump(data, f, indent=4)
    logger.info(f"{bcolors.FAIL}{bcolors.UNDERLINE}[+] Filtered JSON files written to: {output_folder}{bcolors.ENDC}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Convert JSON files in input folder to standardized output')
    parser.add_argument('-i', '--input_folder', type=str,
                        help='path of the input folder', required=True
                        )
    parser.add_argument('-o', '--output_folder', type=str,
                        help='path of the output folder', required=True)
    parser.add_argument('-ah', '--api_header_file', type=str,
                        default=None, help='path of the API header CSV file', required=False)
    args = parser.parse_args()
    clean_count(args.input_folder, args.output_folder)

    if args.api_header_file is not None:
        json_standardizer(
            args.output_folder, args.api_header_file)
