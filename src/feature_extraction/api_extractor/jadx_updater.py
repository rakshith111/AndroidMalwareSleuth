import sys
import requests
import zipfile
import os
sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from libs.color import bcolors
from libs._base_logger import logger,error_logger
from libs._base_logger import ROOT_DIR
from tqdm import tqdm

def download_latest_jadx(auto_update=True):
    '''_summary_

    Args:
        auto_update (bool, optional): Auto update jadx. Defaults to True.
    '''    
    if auto_update:
        root_dir = os.path.join(ROOT_DIR,"libs")
        root_dir=os.path.normpath(root_dir)
        if not os.path.exists(root_dir):
            os.makedirs(root_dir)
        jadx_dir = os.path.join(root_dir, "jadx")  
        version_file = os.path.join(root_dir, "latest_version.txt")
        url = "https://api.github.com/repos/skylot/jadx/releases/latest"
        response = requests.get(url)
        if response.status_code != 200:
            error_logger(
                f"{bcolors.FAIL}[-] Error fetching latest release info: {response.status_code}{bcolors.ENDC}")
            return

        release_info = response.json()
        tag_name = release_info["tag_name"]

        if os.path.exists(version_file):
            with open(version_file, "r") as f:
                current_version = f.read().strip()
        else:
            current_version = ""

        if tag_name != current_version or not os.path.exists(jadx_dir):
            logger.info(
                f"{bcolors.OKGREEN}[+] Downloading and extracting jadx-{tag_name}...{bcolors.ENDC}")

            if not os.path.exists(jadx_dir):
                os.makedirs(jadx_dir)

            download_url = None
            for asset in release_info["assets"]:
                if asset["name"].endswith(".zip"):
                    download_url = asset["browser_download_url"]
                    break

            if not download_url:
                error_logger(
                    f"{bcolors.FAIL}[-] Error: Download URL not found.{bcolors.ENDC}")
                return

            response = requests.get(download_url, stream=True)

            if response.status_code != 200:
                error_logger(
                    f"{bcolors.FAIL}[-] Error downloading jadx-{tag_name}.zip: {response.status_code}{bcolors.ENDC}")
                return

            zip_path = os.path.join(jadx_dir, "{}.zip".format(tag_name))
            zip_path=os.path.normpath(zip_path)
            total_size = int(response.headers.get("content-length", 0))
            with open(zip_path, "wb") as f:
                for data in tqdm(response.iter_content(chunk_size=1024), total=total_size//1024, unit="KB"):
                    f.write(data)

            with zipfile.ZipFile(zip_path, "r") as zip_ref:
                zip_ref.extractall(jadx_dir)

            # Remove downloaded zip file
            os.remove(zip_path)

            # Update the latest_version.txt file
            with open(version_file, "w") as f:
                f.write(tag_name)

            logger.info(
                f"{bcolors.OKGREEN}[+] jadx-{tag_name} successfully downloaded and extracted.{bcolors.ENDC}")
        else:
            logger.info(
                f"{bcolors.OKBLUE}[+] jadx-{tag_name} is already up to date.{bcolors.ENDC}")
    else:
        logger.warning(
            f"{bcolors.WARNING}[x] Auto update is disabled.{bcolors.ENDC}")


if __name__ == "__main__":

    try:
        requests.get("https://www.google.com")
        logger.info(
            f"{bcolors.OKGREEN}[+] Internet connection is available.{bcolors.ENDC}")
    except:
        logger.error(
            f"{bcolors.FAIL}[-] Error: No internet connection.{bcolors.ENDC}")
        sys.exit()
    
    download_latest_jadx(True)
