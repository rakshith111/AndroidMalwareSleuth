import os
import sys
import json
import argparse
import shutil
import subprocess
from collections import defaultdict

sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from libs._base_logger import logger, error_logger, ROOT_DIR
from libs.color import bcolors


EXECUTABLE_PATH = os.path.normpath(os.path.join(
    ROOT_DIR, "feature_extraction", "intent_extractor", "intentExtractor.exe"))


def convert_to_csv_format(name: str) -> str:
    '''Converts a given string into a CSV-friendly format.

    Args:
        name (str): The input string to be converted.

    Returns:
        str: A CSV-friendly string.
    '''
    return name.lower().replace(".", "dot").replace(" ", "_")


def process_intents_and_permissions(input_file_path: str, output_folder_path: str) -> None:
    '''
    Processes intents and permissions from a JSON file and writes the output to another JSON file.

    Args:
        input_file_path (str): The path to the input JSON file.
        output_folder_path (str):The path to the output folder.

    '''
    permissions = set()
    intents = defaultdict(int)

    with open(input_file_path, "r", encoding='utf-8') as file:
        input_data = json.load(file)

    for permission in input_data["usesPermissions"]:
        permission_name = convert_to_csv_format(permission["name"])
        permissions.add(permission_name)

    # Process intents from activities, services, and receivers
    for item_type in ["activities", "services", "receivers"]:
        for item in input_data["application"].get(item_type, []):
            for intent_filter in item.get("intentFilters", []):
                for action in intent_filter.get("actions", []):
                    action_name = convert_to_csv_format(action["name"])
                    intents[action_name] += 1

    output_data = {
        "permissions": {permission: 1 for permission in permissions},
        "intents": dict(intents)
    }

    # Generate the output file name
    input_file_name = os.path.basename(input_file_path)
    output_file_name = os.path.splitext(input_file_name)[
        0] + "_IntentPerms.json"
    output_folder_path = os.path.join(output_folder_path, "IntentPermission")

    os.makedirs(output_folder_path, exist_ok=True)
    output_file_path = os.path.join(output_folder_path, output_file_name)

    with open(output_file_path, "w") as output_file:
        json.dump(output_data, output_file, indent=2)
    logger.info(
        f"{bcolors.OKGREEN}Output file: {bcolors.FAIL}{output_file_path}{bcolors.ENDC}")


def run_intent_extractor(apk_folder: str, output_folder: str) -> str:
    '''Runs the intent extractor on the given APK folder.

    Args:
        apk_folder (str): The path to the APK folder.
        output_folder (str): The path to the output folder.

    Returns:
        str: The path to the output folder.
    '''

    command = f"{EXECUTABLE_PATH} {apk_folder} {output_folder}"

    logger.info(
        f"{bcolors.OKGREEN}Running intentExtractor.exe {bcolors.ENDC}"
    )

    process = subprocess.Popen(
        command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    process.wait()
    if process.returncode != 0:
        error_logger.error(
            f"{bcolors.FAIL}Error while running intentExtractor.exe{bcolors.ENDC}")
        sys.exit(1)
    return output_folder


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Extract intents and permissions from a JSON file.")
    parser.add_argument("-af", "--apk_folder",
                        help="Path to the APK folder", type=str, required=True)
    parser.add_argument("-o", "--output_folder",
                        help="Path to the output folder", type=str, required=True)

    args = parser.parse_args()
    logger.info(f"{bcolors.HEADER}{bcolors.UNDERLINE}Intent and Permission Extractor{bcolors.ENDC}")

    temp_dir = os.path.join(ROOT_DIR, "temp-intent-permission")
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)
    if not os.path.exists(args.output_folder):
        logger.info(
            f"{bcolors.OKGREEN}Creating output folder -->{args.output_folder}{bcolors.ENDC}")
        os.makedirs(args.output_folder)

    # Run intentExtractor.exe
    run_intent_extractor(args.apk_folder, temp_dir)

    # Process each JSON file in the input folder
    for json_file in os.listdir(temp_dir):
        if json_file.endswith(".json"):
            json_file_path = os.path.join(temp_dir, json_file)
            process_intents_and_permissions(
                json_file_path,  args.output_folder)

    # Remove the temp folder
    shutil.rmtree(temp_dir)
    logger.info(
        f"{bcolors.OKGREEN} {bcolors.UNDERLINE}Finished Extracting intents and perms{bcolors.ENDC}")


'''
Try this command:
-af apk/folder  -o SampleOutput
'''
