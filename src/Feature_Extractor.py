import argparse
import os
import sys
import time
sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from libs._base_logger import logger
from libs.color import bcolors
from libs.jadx_updater import download_latest_jadx
from feature_extraction.api_extractor.static_analyzer import set_exec_path, process_input_folder, apk_to_java, extract_features, cleanfolder,write_report,plot_graphs
from feature_extraction.intent_extractor.intent_permisson_extractor import *
from feature_selection.get_count import clean_count, json_standardizer
def intent_extractor(args: argparse.Namespace) -> None:
    '''
    Extracts intents from the given APK file and writes them to a CSV file.

    Args:
        args (argparse.Namespace): The arguments passed to the script.
    '''

    logger.info(
        f"{bcolors.HEADER}{bcolors.UNDERLINE}[+] Intent and Permission Extractor{bcolors.ENDC}")

    temp_dir = "temp-intent-permission"
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)
    if not os.path.exists(args.output_folder):
        logger.info(
            f"{bcolors.OKGREEN}Creating output folder -->{args.output_folder}{bcolors.ENDC}")
        os.makedirs(args.output_folder)

    # Run intentExtractor.exe
    run_intent_extractor(args.apk_folder, temp_dir)

    # Process each JSON file in the input folder
    for json_file in os.listdir(temp_dir):
        if json_file.endswith(".json"):
            json_file_path = os.path.join(temp_dir, json_file)
            process_intents_and_permissions(input_file_path=json_file_path,
                                            output_folder_path=args.output_folder)

    # Remove the temp folder
    shutil.rmtree(temp_dir)
    logger.info(
        f"{bcolors.OKGREEN} {bcolors.BOLD}[+] Finished Extracting intents and perms{bcolors.ENDC}")


def static_feature_extractor(args: argparse.Namespace) -> None:
    '''Extracts static features from the given APK file and writes them to a CSV file.

    Args:
        args (argparse.Namespace): The arguments passed to the script.
    '''

    logger.info(
        f"{bcolors.HEADER}{bcolors.UNDERLINE}[+] Starting Extracting static features{bcolors.ENDC}")

    # Run static analyzer
    download_latest_jadx(args.update)
    EXEC_PATH = set_exec_path()
    OUTPUT_DIR = args.output_folder
    apk_list = process_input_folder(args.apk_folder)
    java_output_folders = apk_to_java(apk_list, output_dir=OUTPUT_DIR,
                                      exec_path=EXEC_PATH, additional_args=args.additional)
    results = extract_features(java_output_folders, OUTPUT_DIR)

    # Clean up folders and write report
    cleanfolder([result['folder'] for result in results])
    report_name = os.path.basename(os.path.normpath(args.apk_folder)) + '.csv'
    report_path = os.path.join(OUTPUT_DIR, report_name)
    write_report(results, report_path)
    plot_graphs(report_path, OUTPUT_DIR)
    logger.info(
        f"{bcolors.OKGREEN}[+] Finished Extracting static features{bcolors.ENDC}")
    logger.info(f"{bcolors.OKGREEN}[+] Cleaning API count{bcolors.ENDC}")
    clean_count(OUTPUT_DIR,OUTPUT_DIR)
    if args.api_header_file is not None:
        logger.info(f"{bcolors.OKGREEN}[+] Standardizing API count{bcolors.ENDC}")
        json_standardizer(OUTPUT_DIR, args.api_header_file)



if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Extracts intents, permissions and static features from the given APK file and writes them to a Json file.")
    parser.add_argument("-af", "--apk_folder",
                        help="Path to the APK folder", type=str, required=True)
    parser.add_argument("-o", "--output_folder",
                        help="Path to the output folder", type=str, required=True)
    parser.add_argument("-u", "--update",   help="Update jadx to latest version",
                        type=bool, default=True, required=False)
    parser.add_argument("-ax", "--additional",
                        help="Additional arguments to be passed to jadx", type=str, default=None, required=False)
    parser.add_argument('-ah', '--api_header_file', type=str,
                        default=None, help='path of the API header CSV file', required=False)
    args = parser.parse_args()
    START_TIME = time.time()
    intent_extractor(args)
    static_feature_extractor(args)
    END_TIME = time.time()
    logger.info(
        f'{bcolors.OKGREEN}[+]Total time taken: {END_TIME - START_TIME} seconds{bcolors.ENDC}')


'''
Try this command:
-af apk/folder -o SampleOutPut
'''
