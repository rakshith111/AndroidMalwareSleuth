import os
import sys
import json
import subprocess
import streamlit as st


sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from src.libs.streamlit_libs import *
from src.feature_selection.get_count import clean_count
from src.libs._base_logger import logger,error_logger
from src.libs.color import bcolors

api_header_path = os.path.join("src", "dataset_heads", "mobfs_heads.csv")
static_analyzer_path = os.path.join(
    "src", "feature_extraction", "api_extractor", "static_analyzer.py")


def static_analyzer(apk_path: str, output_directory_path: str) -> None:
    '''
    Run static analyzer on the given apk and save the output in the given directory.

    Args:
        apk_path (str): Path to the apk file.
        output_directory_path (str): Path to the output directory.
    '''
    output_directory_path = os.path.normpath(output_directory_path)
    logger.info(
        f"{bcolors.OKGREEN}[+] Running Static Analyzer on {apk_path} and saving the output in {output_directory_path}{bcolors.ENDC}")
    command = f"python {static_analyzer_path} -af {apk_path} -o {output_directory_path}"
    subprocess.run(command.split())


st.set_page_config(page_title="API Extraction",
                   layout="wide", page_icon="ðŸš€")
apply_custom_css()
st.markdown(f"## Target APK: {st.session_state['current_apk_name']}")
st.markdown("---")
left_column, middle_column, right_column = st.columns(
    [2.5, 0.3, 2], gap="large")

with right_column:
    api_headers = display_csv_headers(api_header_path)
    st.write("Api Headers:")
    st.write(api_headers)

with left_column:

    output_directory = os.path.join(
        streamlit_temp_json, st.session_state["current_apk_hash"])

    if st.button("Run Static Analyzer"):
        if st.session_state["current_apk_folder"]:

            st.markdown(
                f"## Current Target Folder:\n ### {st.session_state.current_apk_folder}")
            with st.spinner('Please wait for the static analyzer to complete...'):
                static_analyzer(
                    st.session_state["current_apk_folder"], output_directory)
            logger.info(
                f"{bcolors.OKGREEN}[+] Static Analyzer Completed Successfully{bcolors.ENDC}")
            st.success("Static Analyzer Completed Successfully")
            # LOAD GRAPH
            st.markdown("## Graph: Time vs Data Size")
            st.image(os.path.join(output_directory,
                     'plots', "time_vs_data_size.png"))
        else:
            error_logger.error(
                f"{bcolors.FAIL}[-] Please upload an APK first.{bcolors.ENDC}")
            st.error("Please upload an APK first.")
    st.markdown("---")

    if st.button("Load RAW JSON"):
        if "current_apk_folder" in st.session_state:
            json_file_path = os.path.join(
                output_directory, f'{st.session_state["current_apk_hash"]}_API.json')
            data, data_size = load_json(json_file_path)

            if data and data_size:
                logger.info(
                    f"{bcolors.OKGREEN}[+] JSON File Loaded Successfully{bcolors.ENDC}")
                st.success("JSON File Loaded Successfully")
                st.json(data, expanded=False)
            elif data is None and data_size is None:
                error_logger.error(
                    f"{bcolors.FAIL}[-] JSON file not found or Json file is empty. Please make sure to run the Static Analyzer before loading the JSON file.{bcolors.ENDC}")
                st.error(
                    "JSON file not found or Json file is empty. Please make sure to run the Static Analyzer before loading the JSON file.")
        else:
            error_logger.error(
                f"{bcolors.FAIL}[-] Please run the Static Analyzer first.{bcolors.ENDC}")
            st.error("Please run the Static Analyzer first.")
    st.markdown("---")

    if st.button("Clean RAW JSON"):
        clean_json_folder = os.path.join(
            streamlit_app_output, st.session_state["current_apk_hash"])
        clean_count(input_folder=output_directory,
                    output_folder=clean_json_folder)
        logger.info(
            f"{bcolors.OKGREEN}[+] JSON Converted to Standardized Output Successfully{bcolors.ENDC}")
        st.success("JSON Converted to Standardized Output Successfully")
    st.markdown("---")

    if st.button("Load Cleaned JSON"):
        cleaned_json_file_path = os.path.join(
            streamlit_app_output, st.session_state["current_apk_hash"], "APIs", f'{st.session_state["current_apk_hash"]}_API.json')
        if os.path.exists(cleaned_json_file_path):

            with open(cleaned_json_file_path) as json_file:
                data = json.load(json_file)
            st.success("JSON File Loaded Successfully")
            logger.info(
                f"{bcolors.OKGREEN}[+] JSON File Loaded Successfully{bcolors.ENDC}")
            st.json(data, expanded=False)
        else:
            logger.error(
                f"{bcolors.FAIL}[-] JSON file not found or Json file is empty. Please make sure to run the Static Analyzer before loading the JSON file.{bcolors.ENDC}")
            st.error(
                "JSON file not found or Json file is empty. Please make sure to run the Static Analyzer before loading the JSON file.")
    st.markdown("---")
