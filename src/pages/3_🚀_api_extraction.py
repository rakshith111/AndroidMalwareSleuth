import os
import sys
import json
import subprocess
import pandas as pd
import streamlit as st


sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from src.libs.streamlit_libs import *

def display_csv_headers(file_path):
    if os.path.exists(file_path):
        df = pd.read_csv(file_path, header=None)
        return df
    else:
        st.error(f"CSV file not found at {file_path}. Please check the file path.")
        return None
    
api_header_path = os.path.join(os.getcwd(), "Datasets", "CICMalDroidDataset", "MobFS_APIs_heads_mini.csv")

vector_apk_path = ""




def static_analyzer(apk_path, output_directory_path):
    output_directory_path = os.path.normpath(output_directory_path)
    command = f"python {os.getcwd()}/FeatureExtraction/ApiExtractor/static_analyzer.py -af {apk_path} -o {output_directory_path}"
    subprocess.run(command.split())


apply_custom_css()

st.set_page_config(page_title="API Extraction", layout="wide" ,page_icon="ðŸš€")
if "current_apk_path" in st.session_state:
    st.write(f"Current APK: {st.session_state.current_apk_path}")
else:
    st.write("No APK uploaded yet.")

left_column, middle_column, right_column = st.columns([1, 0.3, 1], gap="large")

with left_column:
    output_directory = os.path.join(os.getcwd(),"output_directory", "api_json")

    if st.button("Run Static Analyzer"):
        apk_path = st.session_state.current_apk_path
        directory_path = os.path.dirname(apk_path)

        # print("apk_path", apk_path)
        # print("directory_path", directory_path)
        if "current_apk_path" in st.session_state:
            static_analyzer(directory_path, output_directory)
            st.success("Static Analyzer Completed Successfully")
        else:
            st.error("Please upload an APK first.")

    st.markdown("---")

    if st.button("Load JSON"):
        if "current_apk_path" in st.session_state:
            
            json_file_path = f"{output_directory}/{os.path.splitext(os.path.basename(st.session_state.current_apk_path))[0]}_API.json"
            json_file_path = os.path.normpath(json_file_path)
            # print("json_file_path", json_file_path)
            # print("Before loading JSON")
            data = load_json(json_file_path)  # Assuming you have defined the load_json() function
            # print("After loading JSON")
            if data:
                st.success("JSON File Loaded Successfully")
                st.write(data)
            else:
                st.error("JSON file not found or Json file is empty. Please make sure to run the Static Analyzer before loading the JSON file.")
        else:
            st.error("Please run the Static Analyzer first.")

    st.markdown("---")

    if st.button("Convert JSON to Standardized Output"):
        json_file_path = f"{output_directory}"
        output_directory_path = os.path.join(os.getcwd(),"output_directory", "for_vectorizer")

        # print("json_file_path", json_file_path)
        convert_json_to_standardized_output(json_file_path, output_directory_path)

        st.success("JSON Converted to Standardized Output Successfully")


    if st.button(label = "Load JSON", key = "load_json"):
        json_file_path = f"{os.getcwd()}/output_directory/for_vectorizer/APIs/{os.path.splitext(os.path.basename(st.session_state.current_apk_path))[0]}_API.json"
        # print("json_file_path", json_file_path)
        if os.path.exists(json_file_path):
            with open(json_file_path) as json_file:
                data = json.load(json_file)
            st.success("JSON File Loaded Successfully")
            st.write(data)
        else:
            st.error("JSON file not found or Json file is empty. Please make sure to run the Static Analyzer before loading the JSON file.")

    st.markdown("---")
    # Remove input apk file


with right_column:
    api_headers = display_csv_headers(api_header_path)
    st.write("Api Headers:")
    st.write(api_headers)