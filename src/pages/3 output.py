import streamlit as st
import os
from Train_RandomForest.docker_api import main_s
from FeatureExtraction.vectorizer import process_files, check_paths
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px


def apply_custom_css():
    custom_css = '''
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            background: #000;
        }

        .glow-on-hover {
            width: 220px;
            height: 50px;
            border: none;
            outline: none;
            color: #fff;
            background: #111;
            cursor: pointer;
            position: relative;
            z-index: 0;
            border-radius: 10px;
        }

        .glow-on-hover:before {
            content: '';
            background: linear-gradient(45deg, #ff0000, #ff7300, #fffb00, #48ff00, #00ffd5, #002bff, #7a00ff, #ff00c8, #ff0000);
            position: absolute;
            top: -2px;
            left:-2px;
            background-size: 400%;
            z-index: -1;
            filter: blur(5px);
            width: calc(100% + 4px);
            height: calc(100% + 4px);
            animation: glowing 20s linear infinite;
            opacity: 0;
            transition: opacity .3s ease-in-out;
            border-radius: 10px;
        }

        .glow-on-hover:active {
            color: #000
        }

        .glow-on-hover:active:after {
            background: transparent;
        }

        .glow-on-hover:hover:before {
            opacity: 1;
        }

        .glow-on-hover:after {
            z-index: -1;
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: #111;
            left: 0;
            top: 0;
            border-radius: 10px;
        }

        @keyframes glowing {
            0% { background-position: 0 0; }
            50% { background-position: 400% 0; }
            100% { background-position: 0 0; }
        }
    </style>
    '''
    st.markdown(custom_css, unsafe_allow_html=True)


# App layout
st.set_page_config(page_title="Ouput", layout="wide")
st.title("Output")

apply_custom_css()

output_directory = os.path.join(os.getcwd(), "output_directory")

if st.button("Run Vectorizer"):
    header_csv_files = check_paths()
    input_folder = r"output_directory\for_vectorizer"
    # Get file name inside folders
    for dir, sub_dir, files in os.walk(input_folder):
        for file in files:
            file_name = file.split(".")[0]
    st.write("File Name: ", file_name, ".apk")

    vectors = process_files(input_folder, True, False)
    names = ["API_VECTORS", "INTENT_VECTORS",
             "PERMISSION_VECTORS", "MERGED_VECTORS"]
    # Print vectors and names
    for vector, name in zip(vectors, names):
        st.write(name)
        st.write(vector)
        st.markdown("---")

    op = main_s(vectors)
    # print(op

    # print(op)
    st.write("The output is: ")

    # Define x-axis multicategories
    x = [
        ["Dataset", "Dataset", "Dataset", "Dataset"],
        op['Dataset'].tolist()
    ]

    # Define y-axis values
    y1 = op['Confidence Score'].tolist()
    # Assuming the second bar represents the 'benign' confidence
    y2 = [1 - y for y in y1]

    # Create a bar chart
    fig = go.Figure()

    # Add bars for 'malware' confidence
    fig.add_bar(x=x, y=y1, name="Malware Confidence", marker_color='#FF6363')

    # Add bars for 'benign' confidence
    fig.add_bar(x=x, y=y2, name="Benign Confidence", marker_color='#6495ED')
    # Update layout
    fig.update_layout(barmode="relative")

    # Display the chart in Streamlit
    st.plotly_chart(fig)

    # print last row  as string only value
    last_row = op.values[-1:]
    list_a = last_row.tolist()
    print(list_a)
    list_a = list_a[0]
    str_array = f"The {list_a[0]} for the app '{file_name}.apk 'is {list_a[2]} ({list_a[1]})"

    st.write(str_array)
    st.markdown("---")

    # Pie Chart

    if "Malware" in list_a[2]:
        labels = ['Malware', 'Benign']
        color_discrete_sequence = ['#FF6363', '#6495ED']
    else:
        labels = ['Benign', 'Malware']
        color_discrete_sequence = ['#6495ED', '#FF6363']

    # Assuming that the confidence score is a percentage
    values = [list_a[1], 100-list_a[1]]
    fig_pie = px.pie(values=values, names=labels, title='Final Classification', hole=.3,
                     color_discrete_sequence=color_discrete_sequence)  # specify colors in the same order as labels

    st.plotly_chart(fig_pie)


if st.button("Delete Files"):
    input_folder = r"apks"
    for dir, sub_dir, files in os.walk(input_folder):
        for file in files:
            os.remove(os.path.join(dir, file))
    st.write("Files deleted successfully")
    for dir, sub_dir, files in os.walk(output_directory):
        for file in files:
            os.remove(os.path.join(dir, file))

st.markdown("---")
