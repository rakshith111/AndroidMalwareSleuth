import os
import sys
import hashlib
import subprocess
import pandas as pd

import streamlit as st

sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
sys.path.append(
    os.path.dirname((os.path.abspath(__file__))))
from src.libs.streamlit_libs import *
from src.libs.color import bcolors
from src.libs._base_logger import ROOT_DIR, logger, error_logger

INTENT_HEADER = os.path.join(
    ROOT_DIR, "dataset_heads",  "ChimeraDatasetIntent_headers.csv")
PERMISSION_HEADER = os.path.join(
    ROOT_DIR, "dataset_heads", "ChimeraDatasetPermission_headers.csv")
intent_extractor_path = os.path.join(
    'src', 'feature_extraction', 'intent_extractor', 'intentExtractor.exe')
intent_permission_extraction_py = os.path.join(
    'src', 'feature_extraction', 'intent_extractor', 'intent_permisson_extractor.py')


def save_apk(uploaded_file) -> str:
    '''
    Saves the apk to the temp folder and returns the path to the apk

    Args:
        uploaded_file (FileUploader): The file uploaded by the user

    Returns:
        _type_: The path to the apk
    '''
    # Calculate the hash of the apk
    apk_hash = hashlib.md5(uploaded_file.read()).hexdigest()
    apk_folder = os.path.join(streamlit_temp_apks, apk_hash)
    if not os.path.exists(apk_folder):
        os.makedirs(apk_folder)
    apk_name = apk_hash+".apk"
    # Save the apk to the folder with the hash as the name
    apk_file_path = os.path.join(streamlit_temp_apks, apk_hash, apk_name)
    st.session_state["current_apk_folder"] = apk_folder
    st.session_state["current_apk_hash"] = apk_hash
    st.success("APK Saved Successfully at " + apk_file_path)
    with open(apk_file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    logger.info(
        f"{bcolors.OKGREEN}[+] APK saved at {apk_file_path}{bcolors.ENDC}")
    return apk_file_path


def run_intent_extractor(apk_folder: str, output_directory_path: str) -> None:
    '''
    Runs the intent extractor on the apk folder and saves the output to the output directory

    Args:
        apk_folder (str): Path to the apk folder
        output_directory_path (str): Path to the output directory
    '''

    logger.info(
        f"{bcolors.OKGREEN}[+] Running Intent Extractor on {apk_folder}{bcolors.ENDC}")
    logger.info(
        f"{bcolors.OKGREEN}[+] Output directory: {output_directory_path}{bcolors.ENDC}")
    command = f"{intent_extractor_path} {apk_folder} {output_directory_path}"
    subprocess.run(command.split(), stdout=subprocess.PIPE,
                   stderr=subprocess.PIPE)
    logger.info(
        f"{bcolors.OKGREEN}[+] Intent Extractor finished running{bcolors.ENDC}")


def clean_intents_perms_extractor(apk_folder: str, output_directory: str) -> str:
    '''
    Runs the intent permission extractor on the apk folder and saves the output to the output directory

    Args:
        apk_folder (str): Path to the apk folder
        output_directory (str): Path to the output directory

    Returns:
        str: "Done" when process is completed
    '''

    if not os.path.exists(apk_folder) or not os.path.exists(output_directory):
        st.error(
            "JSON file not found. Please make sure to run the Intent Extractor before loading the JSON file.")
        return None
    else:
        command = f"python {intent_permission_extraction_py} -af {apk_folder} -o {output_directory}"
        subprocess.run(command.split())
        return "Done"

# App layout

st.set_page_config(page_title="Intents And Permission Extraction",
                   layout="wide", page_icon="âœ…")
st.sidebar.header('User Input/Apk')
apply_custom_css()

uploaded_file = st.sidebar.file_uploader(
    "Upload your input APK file", type=["apk"])

left_column, middle_column, right_column = st.columns(
    [2.5, 0.3, 2], gap="large")

# Display CSV headers in the right column
with right_column:

    intent_headers = display_csv_headers(INTENT_HEADER)
    st.write("Intent Headers:")
    st.write(intent_headers)

    permission_headers = display_csv_headers(PERMISSION_HEADER)
    st.write("Permission Headers:")
    st.write(permission_headers)


if st.session_state["current_apk_hash"] or uploaded_file is not None:
    # Main layout with columns

    with left_column:

        if st.button("Save APK"):
            st.markdown("### Filename: ")
            st.write(uploaded_file.name)
            apk_file_path = save_apk(uploaded_file)
        st.markdown("---")

        if st.button("Run Intent Extractor"):
            logger.info(
                f"{bcolors.OKGREEN}[+] Running Intent Extractor{bcolors.ENDC}")
            output_json_dir = os.path.join(
                streamlit_temp_json, "intent_permission", st.session_state["current_apk_hash"])

            st.session_state["temp_json_dir"] = output_json_dir

            if not os.path.exists(output_json_dir):
                os.makedirs(output_json_dir)

            run_intent_extractor(
                st.session_state["current_apk_folder"], st.session_state["temp_json_dir"])
            st.success("Intent Extracted Successfully")
        st.markdown("---")

        if st.button("Load JSON"):
            logger.info(
                f"{bcolors.OKGREEN}[+] Loading JSON file{bcolors.ENDC}")
            intents_json_file_path = os.path.join(streamlit_temp_json, 'intent_permission',
                                          st.session_state["current_apk_hash"], f'{st.session_state["current_apk_hash"]}.json')
            data = load_json(intents_json_file_path)
            if data:
                st.success("JSON File Loaded Successfully")
                st.write(data)
                logger.info(
                    f"{bcolors.OKGREEN}[+] JSON file loaded successfully{bcolors.ENDC}")
            else:
                st.error("JSON File Loading Failed")
                logger.error(
                    f"{bcolors.FAIL}[-] JSON file loading failed{bcolors.ENDC}")

        st.markdown("---")

        if st.button("Clean Extracted Intents & Permissions "):
            logger.info(
                f"{bcolors.OKGREEN}[+] Cleaning Extracted Intents & Permissions{bcolors.ENDC}")
            output_directory = os.path.join(
                streamlit_app_output, st.session_state["current_apk_hash"])
            if not os.path.exists(output_directory):
                os.makedirs(output_directory)

            returns = clean_intents_perms_extractor(
                st.session_state["current_apk_folder"], output_directory)
            if returns != None:
                st.success("Intent Permission Extracted Successfully")
                logger.info(
                    f"{bcolors.OKGREEN}[+] Intent Permission Extracted Successfully{bcolors.ENDC}")
            else:
                error_logger.error(
                    f"{bcolors.FAIL}[-] Intent Permission Extraction Failed{bcolors.ENDC}")
                st.error("Intent Permission Extraction Failed")

        st.markdown("---")

        if st.button("Load Output"):
            output_json_path = os.path.join(
                streamlit_app_output, st.session_state["current_apk_hash"], 'intent_permission', f'{st.session_state["current_apk_hash"]}_IntentPerms.json')
            logger.info(
                f"{bcolors.OKGREEN}[+] Loading Output{bcolors.ENDC}")
            output_data = load_json(output_json_path)
            if output_data:
                st.success("Output Loaded Successfully")
                st.write(output_data)
                logger.info(
                    f"{bcolors.OKGREEN}[+] Output loaded successfully{bcolors.ENDC}")
            else:
                error_logger.error(
                    f"{bcolors.FAIL}[-] Output loading failed{bcolors.ENDC}")
                st.error("Output Loading Failed")
else:
    st.info("Please upload an APK file to continue.")
