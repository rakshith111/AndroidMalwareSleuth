import json
from pathlib import Path
from collections import defaultdict
from tqdm import tqdm


def collect_values(parent_folders, keys_to_collect):
    hashmap = defaultdict(lambda: defaultdict(int))

    # Iterate over all parent folders and JSON files
    for parent_folder in tqdm(parent_folders, desc="Processing parent folders" , total=len(parent_folders)):
        folder_path = Path(parent_folder)
        for json_file in folder_path.glob('*.json'):
            with open(json_file, 'r', encoding="utf-8") as f:
                json_data = json.load(f)

            for key in keys_to_collect:
                if key in json_data:
                    values = json_data[key]
                    if key == 'intent_actions' or key == 'intent_consts':
                        group = 'intents'
                    elif key == 'permissions':
                        group = 'permissions'
                    elif key == 'sensitive_API':
                        group = 'sensitive_API'
                    else:
                        group = key

                    for value in values:
                        cleaned_value = value.strip("'")  # Remove inner quotes
                        hashmap[group][cleaned_value] += 1

    return hashmap


def save_hashmap(hashmap, output_file):
    with open(output_file, 'w', encoding="utf-8") as f:
        json.dump(hashmap, f, indent=2, ensure_ascii=False)
    print(f"Hashmap saved as {output_file}")


def sort_hashmap(hashmap):
    sorted_hashmap = {}
    for group, values_dict in hashmap.items():
        sorted_hashmap[group] = dict(
            sorted(values_dict.items(), key=lambda x: x[1], reverse=True))
    return sorted_hashmap

def filter_by_count_limit(hashmap, intents_count_limit, permissions_count_limit, sensitive_API_count_limit):
    filtered_hashmap = defaultdict(dict)

    for group, values_dict in hashmap.items():
        if group == 'intents':
            count_limit = intents_count_limit
        elif group == 'permissions':
            count_limit = permissions_count_limit
        elif group == 'sensitive_API':
            count_limit = sensitive_API_count_limit
        else:
            continue

        for key, count in values_dict.items():
            if count >= count_limit:
                filtered_hashmap[group][key] = count

    return filtered_hashmap

if __name__ == "__main__":
    target_dir = Path("Datasets/CICMalDroidDataset/Extracted")
    parent_folders = [target_dir / folder for folder in ['adware', 'benign', 'banking', 'riskware', 'sms']]
    keys_to_collect = ['sensitive_API', 'intent_actions', 'intent_consts', 'permissions']

    hashmap = collect_values(parent_folders, keys_to_collect)
    hashmap_file = r'Datasets/CICMalDroidDataset/Extracted/hashmap_output.json'
    save_hashmap(hashmap, hashmap_file)
    intents_count_limit = 100
    permissions_count_limit = 100
    sensitive_API_count_limit = 1000

    # Filter hashmap
    filtered_hashmap = filter_by_count_limit(hashmap, intents_count_limit, permissions_count_limit, sensitive_API_count_limit)

    # Save filtered hashmap
    filtered_hashmap_file = r'Datasets/CICMalDroidDataset/Extracted/filtered_hashmap_output.json'
    sorted_filtered_hashmap = sort_hashmap(filtered_hashmap)
    sorted_filtered_hashmap_file = r'Datasets/CICMalDroidDataset/Extracted/SF_hashmap_output.json'
    save_hashmap(sorted_filtered_hashmap, sorted_filtered_hashmap_file)

    sorted_filtered_hashmap_file = r'Datasets/CICMalDroidDataset/Extracted/SF_hashmap_output.json'
    with open(sorted_filtered_hashmap_file, 'r', encoding="utf-8") as f:
        sorted_filtered_hashmap = json.load(f)
        for key, value in sorted_filtered_hashmap.items():
            print(key, len(value))
