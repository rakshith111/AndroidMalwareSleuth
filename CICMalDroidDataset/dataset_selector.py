import os
import json
import threading
from typing import Dict, Any
from collections import defaultdict
from tqdm import tqdm


def load_mapping(file_path: str) -> Dict[str, Dict[str, Any]]:
    """
    Load mapping JSON file.

    Args:
        file_path: The path to the mapping JSON file.

    Returns:
        A dictionary representing the content of the mapping JSON file.
    """
    with open(file_path, "r") as mapping_file:
        mapping = json.load(mapping_file)
    return mapping


def process_json_file(input_file_path: str, mapping: Dict[str, Dict[str, Any]]) -> Dict[str, int]:
    """
    Process input JSON file based on the given mapping.

    Args:
        input_file_path: The path to the input JSON file.
        mapping: The mapping dictionary.

    Returns:
        A dictionary with the processed data.
    """
    with open(input_file_path, "r") as input_file:
        input_data = json.load(input_file)

    output_data = defaultdict(int)

    try:
        for key, value in input_data["sensitive_API"].items():
            if value > 0:
                for api_key, api_value_list in mapping["sensitive_API"].items():
                    if key in api_value_list:
                        output_data[api_key] += value
    except KeyError:

        return None

    return output_data


def process_folder(folder: str, mapping: Dict[str, Dict[str, Any]], report: Dict[str, int]) -> None:
    """
    Process all JSON files in a folder and save the output to the specified folder.

    Args:
        folder: The name of the folder containing the input JSON files.
        mapping: The mapping dictionary.
        report: The report dictionary.
    """
    input_folder_path = folder
    folder_base = folder.split("\\")[0]

    folder_name = os.path.basename(folder)
    output_folder_path = os.path.join(
        folder_base, "Dataset", "selected", folder_name)
    print(f"Processing folder: {output_folder_path}")
    os.makedirs(output_folder_path, exist_ok=True)
    report = {"success": 0, "failed": 0}

    file_list = os.listdir(input_folder_path)
    failed=[]
    for file_name in tqdm(file_list, desc=f"Processing folder: {folder}", unit="file"):
        input_file_path = os.path.join(input_folder_path, file_name)
        output_file_path = os.path.join(output_folder_path, file_name)

        output_data = process_json_file(input_file_path, mapping)

        if output_data is None:
            report["failed"] += 1
            # Get file size
            file_size = os.path.getsize(input_file_path)
            failed.append((input_file_path, file_size))
        else:
            report["success"] += 1
            with open(output_file_path, "w") as output_file:
                json.dump({"sensitive_API": output_data},
                          output_file, indent=2)

    print(f"\n \nFolder: {folder} processed successfully.")
    print(f"  Success: {report['success']}")
    print(f"  Failed: {report['failed']}")
    print("--------------------\n \n")
    with open(r"CICMalDroidDataset\failed.txt", "a") as f:
        for item in failed:
            f.write(f'{item[1]} {item[0]}')
            f.write("\n")


def check_json_files(directory: str) -> list[str]:
    """
    Check JSON files in the given directory and its subdirectories
    for the 'sensitive_API' key count >= 1.

    Args:
        directory: The root directory to start searching for JSON files.

    Returns:
        A list of file paths that don't meet the condition.
    """
    invalid_files = []

    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".json"):
                file_path = os.path.join(root, file)
                with open(file_path, "r") as json_file:
                    try:
                        data = json.load(json_file)
                        if "sensitive_API" not in data or len(data["sensitive_API"]) < 1:
                            invalid_files.append(file_path)
                    except json.JSONDecodeError:
                        invalid_files.append(file_path)

    return invalid_files


def remove_files(file_paths: list[str]) -> None:
    """
    Remove files specified in the list of file paths.

    Args:
        file_paths: A list of file paths to be removed.
    """
    for file_path in file_paths:
        try:
            os.remove(file_path)
            print(f"Removed file: {file_path}")
        except OSError as e:
            print(f"Error removing file {file_path}: {e}")


if __name__ == "__main__":
    map_file = r"CICMalDroidDataset\map.json"
    base_dir = r"CICMalDroidDataset\Dataset"
    reports = {}
    threads = []

    mapping = load_mapping(map_file)

    folders = os.listdir(base_dir)

    # Select only the folders
    folders = [folder for folder in folders if os.path.isdir(
        os.path.join(base_dir, folder))]

    print("Folders to process: ", folders)

    for folder in folders:
        folder = os.path.join(base_dir, folder)
        report = {"success": 0, "failed": 0}
        reports[folder] = report
        thread = threading.Thread(
            target=process_folder, args=(folder, mapping, report))
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()

    output_final='CICMalDroidDataset\Dataset\selected'
    invalid_files = check_json_files(output_final)
    remove_files(invalid_files)