import os
import json
import csv

from typing import Dict, Any

def process_json_file(file_path: str) -> dict:
    """
    Read and process the JSON file.

    Args:
        file_path: The path to the JSON file.

    Returns:
        A dictionary with the processed data.
    """
    with open(file_path, "r") as json_file:
        data = json.load(json_file)
    processed_data = {}
    for key in mapping["sensitive_API"]:
        processed_data[key] = int(key in data["sensitive_API"])

    return processed_data


def create_csv(output_csv_path: str, selected_folder: str, class_mapping: dict) -> None:
    """
    Create a CSV file based on the processed JSON files in the selected folder.

    Args:
        output_csv_path: The path to the output CSV file.
        selected_folder: The folder containing the processed JSON files.
        class_mapping: A dictionary that maps folder names to class labels (0 or 1).
    """
    header = list(mapping["sensitive_API"].keys())
   
    header.append("class")

    with open(output_csv_path, "w", newline="") as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=header)
        writer.writeheader()
   
        for folder, class_label in class_mapping.items():
            folder_path = os.path.join(selected_folder, folder)
            folder_path = os.path.normpath(folder_path)
            for root, _, files in os.walk(folder_path):
     
                for file in files:
                    if file.endswith(".json"):
                        file_path = os.path.join(root, file)
                        processed_data = process_json_file(file_path)
                        processed_data["class"] = class_label
                        writer.writerow(processed_data)
                    else:
                        print(f"Warning: {file} is not a JSON file.")
    print("CSV file created successfully.")
    print(f"Output path: {output_csv_path}")

def load_mapping(file_path: str) -> Dict[str, Dict[str, Any]]:
    """
    Load mapping JSON file.

    Args:
        file_path: The path to the mapping JSON file.

    Returns:
        A dictionary representing the content of the mapping JSON file.
    """
    with open(file_path, "r") as mapping_file:
        mapping = json.load(mapping_file)
    return mapping
mapping=load_mapping(r"src\libs\mobfs\map.json")

selected_folder = r"RandomForest\Datasets\CICMalDroidDataset\Extracted\selected"
output_csv_path = r"RandomForest\Datasets\CICMalDroidDataset\CICMalDroidxMobFSDataset.csv"
if not os.path.exists(os.path.dirname(output_csv_path)):
    os.makedirs(os.path.dirname(output_csv_path))
if not os.path.exists(os.path.dirname(selected_folder)):
    os.makedirs(os.path.dirname(selected_folder))
class_mapping = {
    "sms": 1,
    "riskware": 1,
    "banking": 1,
    "adware": 1,
    "benign": 0
}

create_csv(output_csv_path, selected_folder, class_mapping)
