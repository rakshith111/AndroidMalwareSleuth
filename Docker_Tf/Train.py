import logging
import os

# docker run -p 8501:8501  --mount type=bind,source=D:/models/my_model/,target=/models/my_model   -e MODEL_NAME=my_model -t tensorflow/serving
# docker run -p 8501:8501  --mount type=bind,source=D:\models\mobfs,target=/models/mobfs   -e MODEL_NAME=mobfs -t tensorflow/serving
## docker run -p 8500:8500 -p 8501:8501  --mount type=bind,source=D:/models/,target=/models   -t tensorflow/serving --model_config_file=/models/model.config --model_config_file_poll_wait_seconds=60

# /bin/python3 /home/cyber/training/Train.py > op.txt >>gb.txt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import dtreeviz
import tensorflow as tf
import tensorflow_decision_forests as tfdf
from IPython import display
import os
print("TFDF version: {}".format(tfdf.__version__))
print("TensorFlow version: {}".format(tf.__version__))

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

tf.get_logger().setLevel('ERROR')
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)

logging.getLogger('tensorflow').setLevel(logging.FATAL)

def print_class(preds, datasets):
    print("| Dataset                               | Confidence Score | Confidence Percentage |")
    print("| --------------------------------------| -----------------| ----------------------|")
    total_score = 0
    
    for i, pred in enumerate(preds):
        score = pred[0][0]
        total_score += score
        dataset_name = datasets[i]
        benign_confidence = (1 - score) * 100
        malware_confidence = score * 100

        if score > 0.5:
            print(f"| {dataset_name} \t\t\t| {score:.2f} \t\t| Malware Confidence @ {malware_confidence:.2f}%\t|")
        else:
            print(f"| {dataset_name} \t\t\t| {score:.2f} \t\t| Benign Confidence @ {benign_confidence:.2f}%\t|")

    avg_score = total_score / len(preds)
    avg_benign_confidence = (1 - avg_score) * 100
    avg_malware_confidence = avg_score * 100

    if avg_score > 0.5:
        print(f"\nFinal Class: Malware Confidence @ {avg_malware_confidence:.2f}% (Score: {avg_score:.2f})")
    else:
        print(f"\nFinal Class: Benign Confidence @ {avg_benign_confidence:.2f}% (Score: {avg_score:.2f})")
## CONFIG The data sets paths
MobFSDatasetAPIS='dataset/CICMalDroidxMobFSDataset.csv'
ChimeraDatasetIntents='dataset/ChimeraDatasetIntent_cleaned.csv'
ChimeraDatasetPermissions='dataset/ChimeraDatasetPermission_cleaned.csv'
ChimeraDatasetMerged='dataset/ChimeraDatasetMerged_cleaned.csv'

MobFSDatasetAPIS_df=pd.read_csv(MobFSDatasetAPIS)
ChimeraDatasetIntents_df=pd.read_csv(ChimeraDatasetIntents)
ChimeraDatasetPermissions_df=pd.read_csv(ChimeraDatasetPermissions)
ChimeraDatasetMerged_df=pd.read_csv(ChimeraDatasetMerged)


print("PRINT Shape of the DataFrames:")
print("MobFSDatasetAPIS_df:",MobFSDatasetAPIS_df.shape)
print("ChimeraDatasetIntents_df:",ChimeraDatasetIntents_df.shape)
print("ChimeraDatasetPermissions_df:",ChimeraDatasetPermissions_df.shape)
print("ChimeraDatasetMerged_df:",ChimeraDatasetMerged_df.shape)

## convert all int64 to bool
# MobFSDatasetAPIS_df = MobFSDatasetAPIS_df.astype('int8')
# ChimeraDatasetIntents_df = ChimeraDatasetIntents_df.astype('int8')
# ChimeraDatasetPermissions_df = ChimeraDatasetPermissions_df.astype('int8')
# ChimeraDatasetMerged_df = ChimeraDatasetMerged_df.astype('int8')

print(MobFSDatasetAPIS_df.head(5))
"""# TO SPLIT TEST TRAIN @70% and 30% the sample data"""

TEST_SPLIT=0.15


test_indices_mobfs = np.random.rand(len(MobFSDatasetAPIS_df))< TEST_SPLIT
test_mobfs_pd = MobFSDatasetAPIS_df[test_indices_mobfs]
train_mobfs_pd = MobFSDatasetAPIS_df[~test_indices_mobfs]

test_indices_chimera_intents = np.random.rand(len(ChimeraDatasetIntents_df))< TEST_SPLIT
test_chimera_intents_pd = ChimeraDatasetIntents_df[test_indices_chimera_intents]
train_chimera_intents_pd = ChimeraDatasetIntents_df[~test_indices_chimera_intents]

test_indices_chimera_permissions = np.random.rand(len(ChimeraDatasetPermissions_df))< TEST_SPLIT
test_chimera_permissions_pd = ChimeraDatasetPermissions_df[test_indices_chimera_permissions]
train_chimera_permissions_pd = ChimeraDatasetPermissions_df[~test_indices_chimera_permissions]

test_indices_chimera_merged = np.random.rand(len(ChimeraDatasetMerged_df))< TEST_SPLIT
test_chimera_merged_pd = ChimeraDatasetMerged_df[test_indices_chimera_merged]
train_chimera_merged_pd = ChimeraDatasetMerged_df[~test_indices_chimera_merged]

# Define a function to print the table
def print_table(data):
    headers = ["DataFrame", "Train Shape", "Test Shape"]
    table = []
    for key, value in data.items():
        train_shape = str(value["train"].shape)
        test_shape = str(value["test"].shape)
        table.append([key, train_shape, test_shape])
    col_width = max(len(word) for row in table for word in row) + 2
    for row in table:
        print("".join(word.ljust(col_width) for word in row))

# Create a dictionary of the data
data = {
    "MobFSDatasetAPIS_df": {"train": train_mobfs_pd, "test": test_mobfs_pd},
    "ChimeraDatasetIntents_df": {"train": train_chimera_intents_pd, "test": test_chimera_intents_pd},
    "ChimeraDatasetPermissions_df": {"train": train_chimera_permissions_pd, "test": test_chimera_permissions_pd},
    "ChimeraDatasetMerged_df": {"train": train_chimera_merged_pd, "test": test_chimera_merged_pd}
}
# Print the table
print("Size of the Test and Train DataFrames:")
print("\t\t\t\tTrain\t\t\t\tTest")
print_table(data)

"""
# Create TfDf

"""

train_mobfs_tfdf = tfdf.keras.pd_dataframe_to_tf_dataset(train_mobfs_pd,label="class")
test_mobfs_tfdf = tfdf.keras.pd_dataframe_to_tf_dataset(test_mobfs_pd,label="class")

train_chimera_intents_tfdf = tfdf.keras.pd_dataframe_to_tf_dataset(train_chimera_intents_pd,label="class")
test_chimera_intents_tfdf = tfdf.keras.pd_dataframe_to_tf_dataset(test_chimera_intents_pd,label="class")

train_chimera_permissions_tfdf = tfdf.keras.pd_dataframe_to_tf_dataset(train_chimera_permissions_pd,label="class")
test_chimera_permissions_tfdf = tfdf.keras.pd_dataframe_to_tf_dataset(test_chimera_permissions_pd,label="class")

train_chimera_merged_tfdf = tfdf.keras.pd_dataframe_to_tf_dataset(train_chimera_merged_pd,label="class")
test_chimera_merged_tfdf = tfdf.keras.pd_dataframe_to_tf_dataset(test_chimera_merged_pd,label="class")
# convert to bool




"""# BUILD MODEL"""

model_mobfs = tfdf.keras.RandomForestModel(
    random_seed=323,

    num_trees=300,

)
model_chimera_intents = tfdf.keras.RandomForestModel(
  random_seed=1323,

    num_trees=300,

)
model_chimera_permissions = tfdf.keras.RandomForestModel(
  random_seed=136,

    num_trees=300,

)
model_chimera_merged = tfdf.keras.RandomForestModel(
    random_seed=123,

    num_trees=300,

)

"""# Train Model"""

model_mobfs.fit(train_mobfs_tfdf)
print("-"*100);print('DONE model_mobfs')
model_chimera_intents.fit(train_chimera_intents_tfdf)
print("-"*100);print('DONE model_chimera_intents')
model_chimera_permissions.fit(train_chimera_permissions_tfdf)
print("-"*100);print('DONE model_chimera_permissions')
model_chimera_merged.fit(train_chimera_merged_tfdf)
print("-"*100);print('DONE model_chimera_merged')

"""# EVALUATE MODEL"""

model_mobfs.compile(metrics=["accuracy"])
evaluation_mobfs = model_mobfs.evaluate(test_mobfs_tfdf)

print(f"Accuracy on test data : {evaluation_mobfs[1]}")
print("Metrics on training data evaluation_mobfs")
print(model_mobfs.make_inspector().evaluation())
print("-"*100)
model_chimera_intents.compile(metrics=["accuracy"])
evaluation_chimera_intents = model_chimera_intents.evaluate(test_chimera_intents_tfdf,)

print(f"Accuracy on test data : {evaluation_chimera_intents[1]}")
print("Metrics on training data evaluation_chimera_intents")
print(model_chimera_intents.make_inspector().evaluation())
print("-"*100)
model_chimera_permissions.compile(metrics=["accuracy"])
evaluation_chimera_permissions = model_chimera_permissions.evaluate(test_chimera_permissions_tfdf, )

print(f"Accuracy on test data : {evaluation_chimera_permissions[1]}")
print("Metrics on training data evaluation_chimera_permissions")
print(model_chimera_permissions.make_inspector().evaluation())
print("-"*100)
model_chimera_merged.compile(metrics=["accuracy"])
evaluation_chimera_merged = model_chimera_merged.evaluate(test_chimera_merged_tfdf, )

print(f"Accuracy on test data : {evaluation_chimera_merged[1]}")
print("Metrics on training data evaluation_chimera_merged")
print(model_chimera_merged.make_inspector().evaluation())
"""# EVALUATE MODEL"""

model_mobfs.compile(metrics=[tf.keras.metrics.AUC(curve="PR")])
evaluation_mobfs = model_mobfs.evaluate(test_mobfs_tfdf)

print(f"PR AUC on test data : {evaluation_mobfs}")
print("Metrics on training data evaluation_mobfs")
print(model_mobfs.make_inspector().evaluation())
print("-"*100)
model_chimera_intents.compile(metrics=[tf.keras.metrics.AUC(curve="PR")])
evaluation_chimera_intents = model_chimera_intents.evaluate(test_chimera_intents_tfdf,)
print(f"PR AUC on test data : {evaluation_chimera_intents}")
print("Metrics on training data evaluation_chimera_intents")
print(model_chimera_intents.make_inspector().evaluation())
print("-"*100)
model_chimera_permissions.compile(metrics=[tf.keras.metrics.AUC(curve="PR")])
evaluation_chimera_permissions = model_chimera_permissions.evaluate(test_chimera_permissions_tfdf, )
print(f"PR AUC on test data : {evaluation_chimera_permissions}")
print("Metrics on training data evaluation_chimera_permissions")
print(model_chimera_permissions.make_inspector().evaluation())
print("-"*100)
model_chimera_merged.compile(metrics=[tf.keras.metrics.AUC(curve="PR")])
evaluation_chimera_merged = model_chimera_merged.evaluate(test_chimera_merged_tfdf, )
print(f"PR AUC on test data : {evaluation_chimera_merged}")
print("Metrics on training data evaluation_chimera_merged")
print(model_chimera_merged.make_inspector().evaluation())



"""
# Log and plot the training logs"""
if not os.path.exists('graphs'):
    os.makedirs('graphs')
print("logs_mobfs")
logs_mobfs = model_mobfs.make_inspector().training_logs()
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot([log.num_trees for log in logs_mobfs], [log.evaluation.accuracy for log in logs_mobfs])
plt.xlabel("Number of trees")
plt.ylabel("Accuracy (out-of-bag)")
plt.subplot(1, 2, 2)
plt.plot([log.num_trees for log in logs_mobfs], [log.evaluation.loss for log in logs_mobfs])
plt.xlabel("Number of trees")
plt.ylabel("Logloss (out-of-bag)")
plt.savefig('graphs/mobfs.png')

print("      ")
print("logs_chimera_intents")
logs_chimera_intents = model_chimera_intents.make_inspector().training_logs()
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot([log.num_trees for log in logs_chimera_intents], [log.evaluation.accuracy for log in logs_chimera_intents])
plt.xlabel("Number of trees")
plt.ylabel("Accuracy (out-of-bag)")
plt.subplot(1, 2, 2)
plt.plot([log.num_trees for log in logs_chimera_intents], [log.evaluation.loss for log in logs_chimera_intents])
plt.xlabel("Number of trees")
plt.ylabel("Logloss (out-of-bag)")
plt.savefig('graphs/chimera_intents.png')
print("      ")
print("logs_chimera_permissions")
logs_chimera_permissions = model_chimera_permissions.make_inspector().training_logs()
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot([log.num_trees for log in logs_chimera_permissions], [log.evaluation.accuracy for log in logs_chimera_permissions])
plt.xlabel("Number of trees")
plt.ylabel("Accuracy (out-of-bag)")
plt.subplot(1, 2, 2)
plt.plot([log.num_trees for log in logs_chimera_permissions], [log.evaluation.loss for log in logs_chimera_permissions])
plt.xlabel("Number of trees")
plt.ylabel("Logloss (out-of-bag)")
plt.savefig('graphs/chimera_permissions.png')
print("      ")
print("logs_chimera_merged")
logs_chimera_merged = model_chimera_merged.make_inspector().training_logs()
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot([log.num_trees for log in logs_chimera_merged], [log.evaluation.accuracy for log in logs_chimera_merged])
plt.xlabel("Number of trees")
plt.ylabel("Accuracy (out-of-bag)")
plt.subplot(1, 2, 2)
plt.plot([log.num_trees for log in logs_chimera_merged], [log.evaluation.loss for log in logs_chimera_merged])
plt.xlabel("Number of trees")
plt.ylabel("Logloss (out-of-bag)")
plt.savefig('graphs/chimera_merged.png')


# Save the model
model_mobfs.save("models/mobfs/1/")
model_chimera_intents.save("models/chimera_intents/1/")
model_chimera_permissions.save("models/chimera_permissions/1/")
model_chimera_merged.save("models/chimera_merged/1/")



