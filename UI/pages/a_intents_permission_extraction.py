import streamlit as st
import pandas as pd
import subprocess
import json
import os
import csv

global current_apk
def save_apk(uploaded_file):
    subdirectory_name = "apks"
    if not os.path.exists(subdirectory_name):
        os.makedirs(subdirectory_name)
        apk_folder = os.path.join(os.getcwd(), subdirectory_name)
    apk_file_path = os.path.join(os.getcwd(), subdirectory_name, uploaded_file.name)
    with open(apk_file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    return apk_file_path

def run_intent_extractor(apk_folder, output_directory_path):
    command = f"E:/AndroidMalwareSleuth/FeatureExtraction/IntentExtractor/intentExtractor.exe {apk_folder} {output_directory_path}"
    subprocess.run(command.split())


def load_json(json_file_path):
    if os.path.exists(json_file_path):
        with open(json_file_path) as json_file:
            data = json.load(json_file)
        return data
    else:
        st.error("JSON file not found. Please make sure to run the Intent Extractor before loading the JSON file.")
        return None

def run_intent_permission_extraction(json_file_path, output_directory):
    if not os.path.exists(json_file_path ) or not os.path.exists(output_directory):
        st.error("JSON file not found. Please make sure to run the Intent Extractor before loading the JSON file.") 
        return None
    else :
        command = f"python E:/AndroidMalwareSleuth/FeatureExtraction/IntentExtractor/intent_permission_extraction_seperated.py {json_file_path} E:/AndroidMalwareSleuth/Datasets/ChimeraDataset/Headers/ChimeraDatasetIntent_headers.csv E:/AndroidMalwareSleuth/Datasets/ChimeraDataset/Headers/ChimeraDatasetPermission_headers.csv {output_directory}"
        print(command)
        subprocess.run(command.split())
        return "Done"


def load_output(output_file_path):
    with open(output_file_path) as output_file:
        output_data = json.load(output_file)
    return output_data


def display_csv_headers(file_path):
    if os.path.exists(file_path):
        df = pd.read_csv(file_path, header=None)
        return df
    else:
        st.error(f"CSV file not found at {file_path}. Please check the file path.")
        return None



import streamlit as st
import pandas as pd
import subprocess
import json
import os

# Functions remain the same

def apply_custom_css():
    custom_css = '''
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            background: #000;
        }

        .glow-on-hover {
            width: 220px;
            height: 50px;
            border: none;
            outline: none;
            color: #fff;
            background: #111;
            cursor: pointer;
            position: relative;
            z-index: 0;
            border-radius: 10px;
        }

        .glow-on-hover:before {
            content: '';
            background: linear-gradient(45deg, #ff0000, #ff7300, #fffb00, #48ff00, #00ffd5, #002bff, #7a00ff, #ff00c8, #ff0000);
            position: absolute;
            top: -2px;
            left:-2px;
            background-size: 400%;
            z-index: -1;
            filter: blur(5px);
            width: calc(100% + 4px);
            height: calc(100% + 4px);
            animation: glowing 20s linear infinite;
            opacity: 0;
            transition: opacity .3s ease-in-out;
            border-radius: 10px;
        }

        .glow-on-hover:active {
            color: #000
        }

        .glow-on-hover:active:after {
            background: transparent;
        }

        .glow-on-hover:hover:before {
            opacity: 1;
        }

        .glow-on-hover:after {
            z-index: -1;
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: #111;
            left: 0;
            top: 0;
            border-radius: 10px;
        }

        @keyframes glowing {
            0% { background-position: 0 0; }
            50% { background-position: 400% 0; }
            100% { background-position: 0 0; }
        }
    </style>
    '''
    st.markdown(custom_css, unsafe_allow_html=True)

# App layout
st.set_page_config(page_title="Intents And Permission Extraction")
st.title("Intents And Permission Extraction")

apply_custom_css()

st.sidebar.header('User Input/Apk')
uploaded_file = st.sidebar.file_uploader("Upload your input APK file", type=["apk"])

output_directory = "E:/AndroidMalwareSleuth/UI/output_directory/for_vectorizer/IntentPermission"

st.markdown('---')
st.header('CSV Headers')
intent_headers_file = "E:/AndroidMalwareSleuth/Datasets/ChimeraDataset/Headers/ChimeraDatasetIntent_headers.csv"
permission_headers_file = "E:/AndroidMalwareSleuth/Datasets/ChimeraDataset/Headers/ChimeraDatasetPermission_headers.csv"

# Create two columns for the layout
left_column, middle_column, right_column = st.columns([1, 0.3, 1]) 

# Move the buttons and display CSV headers in the right column
with right_column:
        intent_headers = display_csv_headers(intent_headers_file)
        st.write("Intent Headers:")
        st.write(intent_headers)

        permission_headers = display_csv_headers(permission_headers_file)
        st.write("Permission Headers:")
        st.write(permission_headers)

      
with left_column:
    if uploaded_file is not None:
        current_apk = uploaded_file.name
        st.markdown("### Filename: ")
        st.write(uploaded_file.name)
        st.session_state.current_apk_path = save_apk(uploaded_file) 

        if st.button("Save APK"):
            apk_file_path = save_apk(uploaded_file)
            st.success("APK Saved Successfully at " + apk_file_path)

        st.markdown("---")


        if st.button("Run Intent Extractor"):
            output_directory = "E:/AndroidMalwareSleuth/UI/output_directory/for_vectorizer/IntentPermission"
            print("Output Directory: ", output_directory)
            if not os.path.exists(output_directory):
                os.makedirs(output_directory)
            apk_folder = os.path.join(os.getcwd(), "apks")
            run_intent_extractor(apk_folder, output_directory)
            
            st.success("Intent Extracted Successfully")

        st.markdown("---")
    

        if st.button("Load JSON"):
            json_file_path = f"{output_directory}/{os.path.splitext(uploaded_file.name)[0]}.json"
            print("JSON File Path: ", json_file_path)
            data = load_json(json_file_path)
            if data:
                st.success("JSON File Loaded Successfully")
                st.write(data)

        st.markdown("---")
    

        if st.button("Run Intent Permission Extraction"):
            json_file_path = f"{output_directory}/{os.path.splitext(uploaded_file.name)[0]}.json"
            print(json_file_path)
            print(output_directory)
            returns = run_intent_permission_extraction(json_file_path, output_directory)
            if returns != None:
                st.success("Intent Permission Extracted Successfully")
            else :
                st.error("Intent Permission Extraction Failed")

        st.markdown("---")

        if st.button("Load Output"):
            output_file_path = f"{output_directory}\\{os.path.splitext(uploaded_file.name)[0]}.json"
            print("Output File Path: ", output_file_path)
            output_data = load_output(output_file_path)
            st.success("Output Generated Successfully")
            st.write(output_data)