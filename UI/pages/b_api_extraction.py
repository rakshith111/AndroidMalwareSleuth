import os
import streamlit as st
import sys
from pathlib import Path
import pandas as pd
import streamlit as st
import subprocess
import json

libs_path = str(Path(__file__).resolve().parent.parent.parent / 'FeatureExtraction/libs')
sys.path.insert(1, libs_path)

from get_count import convert_json_to_standardized_output

vec_path = str(Path(__file__).resolve().parent.parent.parent / 'FeatureExtraction')
sys.path.insert(1, vec_path)

from vectorizer import process_files
from vectorizer import check_paths
from vectorizer import *

# For docker
docker_path = str(Path(__file__).resolve().parent.parent.parent / 'Train_RandomForest')
sys.path.insert(1, docker_path)
from docker_api import *


def display_csv_headers(file_path):
    if os.path.exists(file_path):
        df = pd.read_csv(file_path, header=None)
        return df
    else:
        st.error(f"CSV file not found at {file_path}. Please check the file path.")
        return None
    

    
api_header_path = "E:\AndroidMalwareSleuth\Datasets\CICMalDroidDataset\MobFS_APIs_heads_mini.csv"

vector_apk_path = ""
# Custom CSS
def apply_custom_css():
    custom_css = '''
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            background: #000;
        }

        .glow-on-hover {
            width: 220px;
            height: 50px;
            border: none;
            outline: none;
            color: #fff;
            background: #111;
            cursor: pointer;
            position: relative;
            z-index: 0;
            border-radius: 10px;
        }

        .glow-on-hover:before {
            content: '';
            background: linear-gradient(45deg, #ff0000, #ff7300, #fffb00, #48ff00, #00ffd5, #002bff, #7a00ff, #ff00c8, #ff0000);
            position: absolute;
            top: -2px;
            left:-2px;
            background-size: 400%;
            z-index: -1;
            filter: blur(5px);
            width: calc(100% + 4px);
            height: calc(100% + 4px);
            animation: glowing 20s linear infinite;
            opacity: 0;
            transition: opacity .3s ease-in-out;
            border-radius: 10px;
        }

        .glow-on-hover:active {
            color: #000
        }

        .glow-on-hover:active:after {
            background: transparent;
        }

        .glow-on-hover:hover:before {
            opacity: 1;
        }

        .glow-on-hover:after {
            z-index: -1;
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: #111;
            left: 0;
            top: 0;
            border-radius: 10px;
        }

        @keyframes glowing {
            0% { background-position: 0 0; }
            50% { background-position: 400% 0; }
            100% { background-position: 0 0; }
        }
    </style>
    '''
    st.markdown(custom_css, unsafe_allow_html=True)

st.set_page_config(page_title="API Extraction")
st.title("API Extraction")

def static_analyzer(apk_path, output_directory_path):
    output_directory_path = os.path.normpath(output_directory_path)
    command = f"python E:/AndroidMalwareSleuth/FeatureExtraction/ApiExtractor/static_analyzer.py -af {apk_path} -o {output_directory_path}"
    subprocess.run(command.split())

def load_json(json_file_path):
    if os.path.exists(json_file_path):
        with open(json_file_path) as json_file:
            data = json.load(json_file)
        return data
    else:
        st.error("JSON file not found. Please make sure to run the Intent Extractor before loading the JSON file.")
        return None

apply_custom_css()

if "current_apk_path" in st.session_state:
    st.write(f"Current APK: {st.session_state.current_apk_path}")
else:
    st.write("No APK uploaded yet.")

left_column, middle_column, right_column = st.columns([1, 0.3, 1])
with left_column:
    output_directory = "E:/AndroidMalwareSleuth/UI/output_directory/Api_json"

    if st.button("Run Static Analyzer"):
        apk_path = st.session_state.current_apk_path
        directory_path = os.path.dirname(apk_path)

        print("apk_path", apk_path)
        print("directory_path", directory_path)
        if "current_apk_path" in st.session_state:
            static_analyzer(directory_path, output_directory)
            st.success("Static Analyzer Completed Successfully")
        else:
            st.error("Please upload an APK first.")

    st.markdown("---")

    if st.button("Load JSON"):
        if "current_apk_path" in st.session_state:
            
            json_file_path = f"{output_directory}/{os.path.splitext(os.path.basename(st.session_state.current_apk_path))[0]}_API.json"
            print("json_file_path", json_file_path)
            print("Before loading JSON")
            data = load_json(json_file_path)  # Assuming you have defined the load_json() function
            print("After loading JSON")
            if data:
                st.success("JSON File Loaded Successfully")
                st.write(data)
            else:
                st.error("JSON file not found or Json file is empty. Please make sure to run the Static Analyzer before loading the JSON file.")
        else:
            st.error("Please run the Static Analyzer first.")

    st.markdown("---")

    if st.button("Convert JSON to Standardized Output"):
        json_file_path = f"{output_directory}"
        output_directory_path = "E:/AndroidMalwareSleuth/UI/output_directory/for_vectorizer"
        print("json_file_path", json_file_path)
        convert_json_to_standardized_output(json_file_path, output_directory_path)
        st.success("JSON Converted to Standardized Output Successfully")


    if st.button(label = "Load JSON", key = "load_json"):
        json_file_path = f"E:/AndroidMalwareSleuth/UI/output_directory/for_vectorizer/APIs/{os.path.splitext(os.path.basename(st.session_state.current_apk_path))[0]}_API.json"
        print("json_file_path", json_file_path)
        data = load_json(json_file_path)  # Assuming you have defined the load_json() function
        print("After loading JSON")
        if data:
            st.success("JSON File Loaded Successfully")
            st.write(data)
        else:
            st.error("JSON file not found or Json file is empty. Please make sure to run the Static Analyzer before loading the JSON file.")

    st.markdown("---")

    if st.button("Run Vectorizer"):
        header_csv_files=check_paths()
        input_folder = f"E:/AndroidMalwareSleuth/UI/output_directory/for_vectorizer"
        vectors=process_files(input_folder,True,False)
        for dit in vectors:
            st.json(dit)
            st.markdown("---")
    
        op=main_s(vectors)
        # df = pd.DataFrame(op, columns=["Dataset", "Confidence Score", "Confidence Percentage"])
        st.write(op)


with right_column:
    api_headers = display_csv_headers(api_header_path)
    st.write("Api Headers:")
    st.write(api_headers)
