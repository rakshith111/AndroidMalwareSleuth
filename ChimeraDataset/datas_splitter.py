import dask.dataframe as dd
import os

if not os.path.exists(f'ChimeraDataset\Headers'):
    os.mkdir(f'ChimeraDataset\Headers')

# List of heads to be used from the dataset
intents = ['android.intent.action.main', 'android.intent.action.boot_completed', 'android.intent.action.view', 'android.intent.action.user_present', 'android.intent.action.package_added', 'android.intent.action.package_removed', 'android.intent.action.phone_state', 'android.intent.action.search', 'android.intent.action.package_replaced', 'android.intent.action.create_shortcut', 'android.intent.action.new_outgoing_call', 'android.intent.action.action_power_connected', 'android.intent.action.action_power_disconnected', 'android.intent.action.quickboot_poweron', 'android.intent.action.send', 'android.intent.action.data_sms_received', 'android.intent.action.media_mounted', 'android.intent.action.download_complete', 'android.intent.action.screen_on', 'android.intent.action.media_button', 'android.intent.action.action_shutdown', 'android.intent.action.media_eject', 'android.intent.action.media_unmounted', 'android.intent.action.sim_state_changed', 'android.intent.action.any_data_state', 'android.intent.action.battery_changed', 'android.intent.action.download_notification_clicked', 'android.intent.action.package_install', 'android.intent.action.media_removed', 'android.intent.action.delete', 'android.intent.action.time_set', 'android.intent.action.service_state', 'android.intent.action.media_checking', 'android.intent.action.sendto', 'android.intent.action.timezone_changed', 'android.intent.action.screen_off', 'android.intent.action.date_changed', 'android.intent.action.pick', 'android.intent.action.package_restarted', 'android.intent.action.send_multiple', 'android.intent.action.my_package_replaced', 'android.intent.action.get_content', 'android.intent.action.notification_add', 'android.intent.action.notification_remove', 'android.intent.action.notification_update', 'android.intent.action.battery_low', 'android.intent.action.respond_via_message', 'android.intent.action.set_wallpaper', 'android.intent.action.edit', 'android.intent.action.battery_okay', 'android.intent.action.airplane_mode',
           'android.intent.action.locale_changed', 'android.intent.action.package_changed', 'android.intent.action.headset_plug', 'android.intent.action.sig_str', 'android.intent.action.action_external_applications_available', 'android.intent.action.action_date_changed', 'android.intent.action.action_time_changed', 'android.intent.action.action_media_eject', 'android.intent.action.action_package_added', 'android.intent.action.action_timezone_changed', 'android.intent.action.time_tick', 'android.intent.action.action_view_downloads', 'android.intent.action.close_system_dialogs', 'android.intent.action.web_search', 'android.intent.action.chinamobile_oms_game', 'android.intent.action.reboot', 'android.intent.action.dial', 'android.intent.action.media_scanner_finished', 'android.intent.action.action_package_changed', 'android.intent.action.package_data_cleared', 'android.intent.action.media_search', 'android.intent.action.assist', 'android.intent.action.call', 'android.intent.action.call_button', 'android.intent.action.wallpaper_changed', 'android.intent.action.quickboot_poweroff', 'android.intent.action.close_system_alarm', 'android.intent.action.insert', 'android.intent.action.media_bad_removal', 'android.intent.action.search_long_press', 'android.intent.action.default', 'android.intent.action.music_player', 'android.intent.action.ums_connected', 'android.intent.action.external_applications_available', 'android.intent.action.media_shared', 'android.intent.action.call_privileged', 'android.intent.action.run', 'android.intent.action.camsnap', 'android.intent.action.device_storage_low', 'android.intent.action.manage_network_usage', 'android.intent.action.videocap', 'android.intent.action.camera_button', 'android.intent.action.package_fully_removed', 'android.intent.action.proxy_change', 'android.intent.action.plug_in_airing', 'android.intent.action.set_alarm', 'android.intent.action.media_scanner_started']

permissions = ['android.permission.internet', 'android.permission.access_network_state', 'android.permission.write_external_storage', 'android.permission.read_phone_state', 'android.permission.access_wifi_state', 'android.permission.wake_lock', 'android.permission.access_coarse_location', 'android.permission.vibrate', 'android.permission.access_fine_location', 'android.permission.receive_boot_completed', 'android.permission.get_tasks', 'android.permission.get_accounts', 'android.permission.system_alert_window', 'android.permission.read_external_storage', 'android.permission.change_wifi_state', 'android.permission.send_sms', 'android.permission.camera', 'android.permission.write_settings', 'android.permission.mount_unmount_filesystems', 'android.permission.receive_sms', 'android.permission.call_phone', 'android.permission.read_sms', 'android.permission.read_contacts', 'android.permission.record_audio', 'android.permission.read_logs', 'android.permission.change_network_state', 'android.permission.restart_packages', 'android.permission.disable_keyguard', 'android.permission.modify_audio_settings', 'android.permission.write_sms', 'android.permission.access_location_extra_commands', 'android.permission.bluetooth', 'android.permission.use_credentials', 'android.permission.set_wallpaper', 'android.permission.flashlight', 'android.permission.broadcast_sticky', 'android.permission.write_contacts', 'android.permission.process_outgoing_calls', 'android.permission.kill_background_processes', 'android.permission.bluetooth_admin', 'android.permission.manage_accounts', 'android.permission.receive_user_present', 'android.permission.change_configuration', 'android.permission.install_packages', 'android.permission.access_mock_location', 'android.permission.download_without_notification', 'android.permission.write_apn_settings', 'android.permission.read_call_log', 'android.permission.receive_mms', 'android.permission.access_gps', 'android.permission.read_calendar',
               'android.permission.access_download_manager', 'android.permission.authenticate_accounts', 'android.permission.baidu_location_service', 'android.permission.write_calendar', 'android.permission.system_overlay_window', 'android.permission.battery_stats', 'android.permission.delete_packages', 'android.permission.modify_phone_state', 'android.permission.get_package_size', 'android.permission.clear_app_cache', 'android.permission.receive_wap_push', 'android.permission.write_call_log', 'android.permission.write_secure_settings', 'android.permission.access_coarse_updates', 'android.permission.record_video', 'android.permission.interact_across_users_full', 'android.permission.read_settings', 'android.permission.read_profile', 'android.permission.set_wallpaper_hints', 'android.permission.expand_status_bar', 'android.permission.call_privileged', 'android.permission.change_component_enabled_state', 'android.permission.device_power', 'android.permission.write_sync_settings', 'android.permission.reorder_tasks', 'android.permission.read_sync_settings', 'android.permission.nfc', 'android.permission.change_wifi_multicast_state', 'android.permission.write_owner_data', 'android.permission.set_debug_app', 'android.permission.broadcast_sms', 'android.permission.package_usage_stats', 'android.permission.write_internal_storage', 'android.permission.broadcast_package_added', 'android.permission.broadcast_package_replaced', 'android.permission.broadcast_package_install', 'android.permission.access_location', 'android.permission.broadcast_package_changed', 'android.permission.access_mtk_mmhw', 'android.permission.read_owner_data', 'android.permission.manage_documents', 'android.permission.access_superuser', 'android.permission.write_media_storage', 'android.permission.update_device_stats', 'android.permission.access_assisted_gps', 'android.permission.read_sync_stats', 'android.permission.raised_thread_priority', 'android.permission.persistent_activity', ]


def save_headers_to_file(columns, file_name):

    with open(f"ChimeraDataset\Headers\{file_name}_headers.csv", "w") as f:
        f.write(file_name[14:])
        f.write("\n")
        for i in columns:
            f.write(i)
            f.write("\n")


# List of heads to be used from the dataset

def replace_dots_in_column_names(dask_df):
    new_columns = {column: column.replace(
        '.', 'DOT') for column in dask_df.columns}
    return dask_df.rename(columns=new_columns)


def convert_headers_to_lowercase(dask_df):
    new_columns = {column: column.lower() for column in dask_df.columns}
    return dask_df.rename(columns=new_columns)


def convert_true_false_to_numeric(dask_df):
    for column in dask_df.columns:
        dask_df[column] = dask_df[column].apply(
            lambda x: 1 if x is True else (0 if x is False else x), meta=('x', 'f8'))
    return dask_df


def read_dataset(file_path):
    return dd.read_csv(file_path)


def filter_and_convert_data(data_set, columns_to_keep):
    filtered_data_set = data_set[columns_to_keep]
    converted_data_set = convert_true_false_to_numeric(filtered_data_set)
    converted_data_set = replace_dots_in_column_names(converted_data_set)
    converted_data_set = convert_headers_to_lowercase(converted_data_set)
    print(f"Converted dataset to keep {columns_to_keep[0]}....")
    return converted_data_set


def save_dataset(data_set, output_file):
    data_set.to_csv(output_file, single_file=True, index=False)
    print(f"Saved dataset to {output_file}")


def main():
    # Download the dataset from https://ieee-dataport.org/open-access/malware-analysis-datasets-chimera-multimodal-deep-learning-android-malware-detection
    print("Reading dataset...")
    input_file = 'ChimeraDataset\ChimeraDataset.csv'
    data_set = read_dataset(input_file)
    # Basic info
    print("Head", data_set.head())
    print("shape",)
    print("columns", data_set.columns)

    # Merge permissions and intents
    merged = permissions + intents
    merged.append('class')
    data_set_merged = filter_and_convert_data(data_set, merged)
    save_dataset(data_set_merged, 'ChimeraDataset\ChimeraDatasetMerged.csv')

    # Process and save permissions dataset
    permissions.append('class')
    data_set_permission = filter_and_convert_data(data_set, permissions)
    save_dataset(data_set_permission,
                 'ChimeraDataset\ChimeraDatasetPermission.csv')

    # Process and save intents dataset
    intents.append('class')
    data_set_intent = filter_and_convert_data(data_set, intents)
    save_dataset(data_set_intent, 'ChimeraDataset\ChimeraDatasetIntent.csv')

    # Save metadata of the dataset
    save_headers_to_file(data_set_intent.columns, 'ChimeraDatasetIntent')
    save_headers_to_file(data_set_permission.columns,
                         'ChimeraDatasetPermission')
    save_headers_to_file(data_set_merged.columns, 'ChimeraDatasetMerged')
    save_headers_to_file(data_set.columns, 'ChimeraDatasetOriginal')


if __name__ == "__main__":
    main()
    from cleaner import removeDuplicates
    removeDuplicates()
