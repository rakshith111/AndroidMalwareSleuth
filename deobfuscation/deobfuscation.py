import os
import subprocess
import xml.etree.ElementTree as ET


def get_package_name_from_android_manifest(file_path):
    tree = ET.parse(file_path)
    root = tree.getroot()
    package_name = root.get("package")
    return package_name


def decompile_apk_with_jadx(apk_path, jadx_path, output_folder):
    jadx_executable = os.path.join(jadx_path, "bin", "jadx" + (".bat" if os.name == 'nt' else ""))
    cmd = [jadx_executable, "-d", output_folder, apk_path]
    working_directory = " "
    subprocess.run(cmd, cwd=working_directory)


def deobfuscate_with_simplify(apk_path, simplify_jar_path, package_name, output_apk_path):
    cmd = f"java -jar {simplify_jar_path} -it {package_name} {apk_path} -o {output_apk_path}"
    working_directory = " "
    subprocess.run(cmd.split(), cwd=working_directory)


# Configuration
apk_folder = " "
jadx_path = " "
simplify_jar_path = " "

# Iterate over all APK files in the given folder
for filename in os.listdir(apk_folder):
    if filename.endswith(".apk"):
        original_apk_path = os.path.join(apk_folder, filename)

        # Step 1: Decompile APK using jadx
        output_folder = "output_folder"
        decompile_apk_with_jadx(original_apk_path, jadx_path, output_folder)

        # Step 2: Get package name from AndroidManifest.xml
        manifest_path = os.path.join(output_folder, "resources/AndroidManifest.xml")
        package_name = get_package_name_from_android_manifest(manifest_path)
        print(f"Package name: {package_name}")

        # Step 3: Deobfuscate APK with simplify
        deobfuscated_apk_path = f"deobfuscated_apk/deobfuscated_{filename}"
        deobfuscate_with_simplify(original_apk_path, simplify_jar_path, package_name, deobfuscated_apk_path)
